(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["xmlmc"] = factory();
	else
		root["xmlmc"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 83);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(57)('wks');
var uid = __webpack_require__(46);
var Symbol = __webpack_require__(3).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLProcessingInstruction, XMLRaw, XMLText, isEmpty, isFunction, isObject, ref,
    hasProp = {}.hasOwnProperty;

  ref = __webpack_require__(14), isObject = ref.isObject, isFunction = ref.isFunction, isEmpty = ref.isEmpty;

  XMLElement = null;

  XMLCData = null;

  XMLComment = null;

  XMLDeclaration = null;

  XMLDocType = null;

  XMLRaw = null;

  XMLText = null;

  XMLProcessingInstruction = null;

  module.exports = XMLNode = (function() {
    function XMLNode(parent) {
      this.parent = parent;
      if (this.parent) {
        this.options = this.parent.options;
        this.stringify = this.parent.stringify;
      }
      this.children = [];
      if (!XMLElement) {
        XMLElement = __webpack_require__(26);
        XMLCData = __webpack_require__(27);
        XMLComment = __webpack_require__(28);
        XMLDeclaration = __webpack_require__(29);
        XMLDocType = __webpack_require__(30);
        XMLRaw = __webpack_require__(35);
        XMLText = __webpack_require__(36);
        XMLProcessingInstruction = __webpack_require__(37);
      }
    }

    XMLNode.prototype.element = function(name, attributes, text) {
      var childNode, item, j, k, key, lastChild, len, len1, ref1, val;
      lastChild = null;
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
      }
      if (name != null) {
        name = name.valueOf();
      }
      if (Array.isArray(name)) {
        for (j = 0, len = name.length; j < len; j++) {
          item = name[j];
          lastChild = this.element(item);
        }
      } else if (isFunction(name)) {
        lastChild = this.element(name.apply());
      } else if (isObject(name)) {
        for (key in name) {
          if (!hasProp.call(name, key)) continue;
          val = name[key];
          if (isFunction(val)) {
            val = val.apply();
          }
          if ((isObject(val)) && (isEmpty(val))) {
            val = null;
          }
          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
          } else if (!this.options.separateArrayItems && Array.isArray(val)) {
            for (k = 0, len1 = val.length; k < len1; k++) {
              item = val[k];
              childNode = {};
              childNode[key] = item;
              lastChild = this.element(childNode);
            }
          } else if (isObject(val)) {
            lastChild = this.element(key);
            lastChild.element(val);
          } else {
            lastChild = this.element(key, val);
          }
        }
      } else {
        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
          lastChild = this.text(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
          lastChild = this.cdata(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
          lastChild = this.comment(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
          lastChild = this.raw(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
          lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
        } else {
          lastChild = this.node(name, attributes, text);
        }
      }
      if (lastChild == null) {
        throw new Error("Could not create any elements with: " + name);
      }
      return lastChild;
    };

    XMLNode.prototype.insertBefore = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.insertAfter = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i + 1);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.remove = function() {
      var i, ref1;
      if (this.isRoot) {
        throw new Error("Cannot remove the root element");
      }
      i = this.parent.children.indexOf(this);
      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref1 = [])), ref1;
      return this.parent;
    };

    XMLNode.prototype.node = function(name, attributes, text) {
      var child, ref1;
      if (name != null) {
        name = name.valueOf();
      }
      attributes || (attributes = {});
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
      }
      child = new XMLElement(this, name, attributes);
      if (text != null) {
        child.text(text);
      }
      this.children.push(child);
      return child;
    };

    XMLNode.prototype.text = function(value) {
      var child;
      child = new XMLText(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.cdata = function(value) {
      var child;
      child = new XMLCData(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.comment = function(value) {
      var child;
      child = new XMLComment(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.commentBefore = function(value) {
      var child, i, removed;
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i);
      child = this.parent.comment(value);
      Array.prototype.push.apply(this.parent.children, removed);
      return this;
    };

    XMLNode.prototype.commentAfter = function(value) {
      var child, i, removed;
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i + 1);
      child = this.parent.comment(value);
      Array.prototype.push.apply(this.parent.children, removed);
      return this;
    };

    XMLNode.prototype.raw = function(value) {
      var child;
      child = new XMLRaw(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.instruction = function(target, value) {
      var insTarget, insValue, instruction, j, len;
      if (target != null) {
        target = target.valueOf();
      }
      if (value != null) {
        value = value.valueOf();
      }
      if (Array.isArray(target)) {
        for (j = 0, len = target.length; j < len; j++) {
          insTarget = target[j];
          this.instruction(insTarget);
        }
      } else if (isObject(target)) {
        for (insTarget in target) {
          if (!hasProp.call(target, insTarget)) continue;
          insValue = target[insTarget];
          this.instruction(insTarget, insValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        instruction = new XMLProcessingInstruction(this, target, value);
        this.children.push(instruction);
      }
      return this;
    };

    XMLNode.prototype.instructionBefore = function(target, value) {
      var child, i, removed;
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i);
      child = this.parent.instruction(target, value);
      Array.prototype.push.apply(this.parent.children, removed);
      return this;
    };

    XMLNode.prototype.instructionAfter = function(target, value) {
      var child, i, removed;
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i + 1);
      child = this.parent.instruction(target, value);
      Array.prototype.push.apply(this.parent.children, removed);
      return this;
    };

    XMLNode.prototype.declaration = function(version, encoding, standalone) {
      var doc, xmldec;
      doc = this.document();
      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
      if (doc.children[0] instanceof XMLDeclaration) {
        doc.children[0] = xmldec;
      } else {
        doc.children.unshift(xmldec);
      }
      return doc.root() || doc;
    };

    XMLNode.prototype.doctype = function(pubID, sysID) {
      var child, doc, doctype, i, j, k, len, len1, ref1, ref2;
      doc = this.document();
      doctype = new XMLDocType(doc, pubID, sysID);
      ref1 = doc.children;
      for (i = j = 0, len = ref1.length; j < len; i = ++j) {
        child = ref1[i];
        if (child instanceof XMLDocType) {
          doc.children[i] = doctype;
          return doctype;
        }
      }
      ref2 = doc.children;
      for (i = k = 0, len1 = ref2.length; k < len1; i = ++k) {
        child = ref2[i];
        if (child.isRoot) {
          doc.children.splice(i, 0, doctype);
          return doctype;
        }
      }
      doc.children.push(doctype);
      return doctype;
    };

    XMLNode.prototype.up = function() {
      if (this.isRoot) {
        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
      }
      return this.parent;
    };

    XMLNode.prototype.root = function() {
      var node;
      node = this;
      while (node) {
        if (node.isDocument) {
          return node.rootObject;
        } else if (node.isRoot) {
          return node;
        } else {
          node = node.parent;
        }
      }
    };

    XMLNode.prototype.document = function() {
      var node;
      node = this;
      while (node) {
        if (node.isDocument) {
          return node;
        } else {
          node = node.parent;
        }
      }
    };

    XMLNode.prototype.end = function(options) {
      return this.document().end(options);
    };

    XMLNode.prototype.prev = function() {
      var i;
      i = this.parent.children.indexOf(this);
      if (i < 1) {
        throw new Error("Already at the first node");
      }
      return this.parent.children[i - 1];
    };

    XMLNode.prototype.next = function() {
      var i;
      i = this.parent.children.indexOf(this);
      if (i === -1 || i === this.parent.children.length - 1) {
        throw new Error("Already at the last node");
      }
      return this.parent.children[i + 1];
    };

    XMLNode.prototype.importDocument = function(doc) {
      var clonedRoot;
      clonedRoot = doc.root().clone();
      clonedRoot.parent = this;
      clonedRoot.isRoot = false;
      this.children.push(clonedRoot);
      return this;
    };

    XMLNode.prototype.ele = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.nod = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.txt = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLNode.prototype.doc = function() {
      return this.document();
    };

    XMLNode.prototype.dec = function(version, encoding, standalone) {
      return this.declaration(version, encoding, standalone);
    };

    XMLNode.prototype.dtd = function(pubID, sysID) {
      return this.doctype(pubID, sysID);
    };

    XMLNode.prototype.e = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.n = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.t = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.d = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.c = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.r = function(value) {
      return this.raw(value);
    };

    XMLNode.prototype.i = function(target, value) {
      return this.instruction(target, value);
    };

    XMLNode.prototype.u = function() {
      return this.up();
    };

    XMLNode.prototype.importXMLBuilder = function(doc) {
      return this.importDocument(doc);
    };

    return XMLNode;

  })();

}).call(this);


/***/ }),
/* 3 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 4 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.1' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(119);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(71);
var isBuffer = __webpack_require__(124);

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object' && !isArray(obj)) {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(84), __esModule: true };

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var core = __webpack_require__(4);
var ctx = __webpack_require__(15);
var hide = __webpack_require__(16);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && key in exports) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(142), __esModule: true };

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(157);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _keys = __webpack_require__(160);

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(5);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var xmlbuilder_1 = __webpack_require__(163);

var Request = function () {
    function Request(service, method) {
        var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var paramMap = arguments[3];
        (0, _classCallCheck3.default)(this, Request);

        this.service = service;
        this.method = method;
        this.xmlmc = xmlbuilder_1.create('methodCall').att('service', service).att('method', method);
        this.paramsNotSet = true;
        if ((0, _keys2.default)(params).length) {
            this.addParams(params, paramMap);
        }
    }

    (0, _createClass3.default)(Request, [{
        key: "_createXmlmc",
        value: function _createXmlmc(params) {
            var _this = this;

            var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.xmlmc;
            var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'params';

            if (typeof el === 'string') {
                key = el;
            }
            if (el === this.xmlmc && this.paramsNotSet) {
                el = el.ele(key);
                this.paramsNotSet = false;
            }
            var paramKeys = (0, _keys2.default)(params);
            paramKeys.forEach(function (p) {
                var param = params[p];
                if (param === undefined) {
                    return;
                }
                if ((0, _getPrototypeOf2.default)(param) === Object.prototype) {
                    el = el.ele(p);
                    _this._createXmlmc(params[p], el);
                } else {
                    el.ele(p, param.toString());
                }
            });
        }
        /**
         * Add a simple / complex param
         * @param {Params} param
         * @param {string} value
         */

    }, {
        key: "addParam",
        value: function addParam(param, value) {
            var params = {};
            params[param] = value;
            this._createXmlmc(params);
        }
        /**
         * Add all the params at once
         * @param {Params} params
         * @param paramMap
         */

    }, {
        key: "addParams",
        value: function addParams(params, paramMap) {
            var orderedParams = {};
            // ensure that all the params are in the proper order
            paramMap.forEach(function (v) {
                if (params.hasOwnProperty(v)) {
                    orderedParams[v] = params[v];
                }
            });
            this._createXmlmc(orderedParams);
        }
    }, {
        key: "toString",
        value: function toString() {
            return this.xmlmc.toString();
        }
    }]);
    return Request;
}();

exports.Request = Request;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(17);
var IE8_DOM_DEFINE = __webpack_require__(86);
var toPrimitive = __webpack_require__(87);
var dP = Object.defineProperty;

exports.f = __webpack_require__(13) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(18)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 14 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.12.6
(function() {
  var assign, isArray, isEmpty, isFunction, isObject, isPlainObject,
    slice = [].slice,
    hasProp = {}.hasOwnProperty;

  assign = function() {
    var i, key, len, source, sources, target;
    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (isFunction(Object.assign)) {
      Object.assign.apply(null, arguments);
    } else {
      for (i = 0, len = sources.length; i < len; i++) {
        source = sources[i];
        if (source != null) {
          for (key in source) {
            if (!hasProp.call(source, key)) continue;
            target[key] = source[key];
          }
        }
      }
    }
    return target;
  };

  isFunction = function(val) {
    return !!val && Object.prototype.toString.call(val) === '[object Function]';
  };

  isObject = function(val) {
    var ref;
    return !!val && ((ref = typeof val) === 'function' || ref === 'object');
  };

  isArray = function(val) {
    if (isFunction(Array.isArray)) {
      return Array.isArray(val);
    } else {
      return Object.prototype.toString.call(val) === '[object Array]';
    }
  };

  isEmpty = function(val) {
    var key;
    if (isArray(val)) {
      return !val.length;
    } else {
      for (key in val) {
        if (!hasProp.call(val, key)) continue;
        return false;
      }
      return true;
    }
  };

  isPlainObject = function(val) {
    var ctor, proto;
    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));
  };

  module.exports.assign = assign;

  module.exports.isFunction = isFunction;

  module.exports.isObject = isObject;

  module.exports.isArray = isArray;

  module.exports.isEmpty = isEmpty;

  module.exports.isPlainObject = isPlainObject;

}).call(this);


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(19);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(12);
var createDesc = __webpack_require__(56);
module.exports = __webpack_require__(13) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(11);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 20 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 21 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(42);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(15);
var call = __webpack_require__(110);
var isArrayIter = __webpack_require__(111);
var anObject = __webpack_require__(17);
var toLength = __webpack_require__(43);
var getIterFn = __webpack_require__(112);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(12).f;
var has = __webpack_require__(20);
var TAG = __webpack_require__(1)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLAttribute, XMLElement, XMLNode, isFunction, isObject, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = __webpack_require__(14), isObject = ref.isObject, isFunction = ref.isFunction;

  XMLNode = __webpack_require__(2);

  XMLAttribute = __webpack_require__(80);

  module.exports = XMLElement = (function(superClass) {
    extend(XMLElement, superClass);

    function XMLElement(parent, name, attributes) {
      XMLElement.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing element name");
      }
      this.name = this.stringify.eleName(name);
      this.attributes = {};
      if (attributes != null) {
        this.attribute(attributes);
      }
      if (parent.isDocument) {
        this.isRoot = true;
        this.documentObject = parent;
        parent.rootObject = this;
      }
    }

    XMLElement.prototype.clone = function() {
      var att, attName, clonedSelf, ref1;
      clonedSelf = Object.create(this);
      if (clonedSelf.isRoot) {
        clonedSelf.documentObject = null;
      }
      clonedSelf.attributes = {};
      ref1 = this.attributes;
      for (attName in ref1) {
        if (!hasProp.call(ref1, attName)) continue;
        att = ref1[attName];
        clonedSelf.attributes[attName] = att.clone();
      }
      clonedSelf.children = [];
      this.children.forEach(function(child) {
        var clonedChild;
        clonedChild = child.clone();
        clonedChild.parent = clonedSelf;
        return clonedSelf.children.push(clonedChild);
      });
      return clonedSelf;
    };

    XMLElement.prototype.attribute = function(name, value) {
      var attName, attValue;
      if (name != null) {
        name = name.valueOf();
      }
      if (isObject(name)) {
        for (attName in name) {
          if (!hasProp.call(name, attName)) continue;
          attValue = name[attName];
          this.attribute(attName, attValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        if (!this.options.skipNullAttributes || (value != null)) {
          this.attributes[name] = new XMLAttribute(this, name, value);
        }
      }
      return this;
    };

    XMLElement.prototype.removeAttribute = function(name) {
      var attName, i, len;
      if (name == null) {
        throw new Error("Missing attribute name");
      }
      name = name.valueOf();
      if (Array.isArray(name)) {
        for (i = 0, len = name.length; i < len; i++) {
          attName = name[i];
          delete this.attributes[attName];
        }
      } else {
        delete this.attributes[name];
      }
      return this;
    };

    XMLElement.prototype.toString = function(options) {
      return this.options.writer.set(options).element(this);
    };

    XMLElement.prototype.att = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.a = function(name, value) {
      return this.attribute(name, value);
    };

    return XMLElement;

  })(XMLNode);

}).call(this);


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLCData, XMLNode,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = __webpack_require__(2);

  module.exports = XMLCData = (function(superClass) {
    extend(XMLCData, superClass);

    function XMLCData(parent, text) {
      XMLCData.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing CDATA text");
      }
      this.text = this.stringify.cdata(text);
    }

    XMLCData.prototype.clone = function() {
      return Object.create(this);
    };

    XMLCData.prototype.toString = function(options) {
      return this.options.writer.set(options).cdata(this);
    };

    return XMLCData;

  })(XMLNode);

}).call(this);


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLComment, XMLNode,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = __webpack_require__(2);

  module.exports = XMLComment = (function(superClass) {
    extend(XMLComment, superClass);

    function XMLComment(parent, text) {
      XMLComment.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing comment text");
      }
      this.text = this.stringify.comment(text);
    }

    XMLComment.prototype.clone = function() {
      return Object.create(this);
    };

    XMLComment.prototype.toString = function(options) {
      return this.options.writer.set(options).comment(this);
    };

    return XMLComment;

  })(XMLNode);

}).call(this);


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDeclaration, XMLNode, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  isObject = __webpack_require__(14).isObject;

  XMLNode = __webpack_require__(2);

  module.exports = XMLDeclaration = (function(superClass) {
    extend(XMLDeclaration, superClass);

    function XMLDeclaration(parent, version, encoding, standalone) {
      var ref;
      XMLDeclaration.__super__.constructor.call(this, parent);
      if (isObject(version)) {
        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
      }
      if (!version) {
        version = '1.0';
      }
      this.version = this.stringify.xmlVersion(version);
      if (encoding != null) {
        this.encoding = this.stringify.xmlEncoding(encoding);
      }
      if (standalone != null) {
        this.standalone = this.stringify.xmlStandalone(standalone);
      }
    }

    XMLDeclaration.prototype.toString = function(options) {
      return this.options.writer.set(options).declaration(this);
    };

    return XMLDeclaration;

  })(XMLNode);

}).call(this);


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNode, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  isObject = __webpack_require__(14).isObject;

  XMLNode = __webpack_require__(2);

  XMLDTDAttList = __webpack_require__(31);

  XMLDTDEntity = __webpack_require__(32);

  XMLDTDElement = __webpack_require__(33);

  XMLDTDNotation = __webpack_require__(34);

  module.exports = XMLDocType = (function(superClass) {
    extend(XMLDocType, superClass);

    function XMLDocType(parent, pubID, sysID) {
      var ref, ref1;
      XMLDocType.__super__.constructor.call(this, parent);
      this.documentObject = parent;
      if (isObject(pubID)) {
        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
      }
      if (sysID == null) {
        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
      }
      if (pubID != null) {
        this.pubID = this.stringify.dtdPubID(pubID);
      }
      if (sysID != null) {
        this.sysID = this.stringify.dtdSysID(sysID);
      }
    }

    XMLDocType.prototype.element = function(name, value) {
      var child;
      child = new XMLDTDElement(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      var child;
      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.entity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, false, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.pEntity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, true, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.notation = function(name, value) {
      var child;
      child = new XMLDTDNotation(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.toString = function(options) {
      return this.options.writer.set(options).docType(this);
    };

    XMLDocType.prototype.ele = function(name, value) {
      return this.element(name, value);
    };

    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
    };

    XMLDocType.prototype.ent = function(name, value) {
      return this.entity(name, value);
    };

    XMLDocType.prototype.pent = function(name, value) {
      return this.pEntity(name, value);
    };

    XMLDocType.prototype.not = function(name, value) {
      return this.notation(name, value);
    };

    XMLDocType.prototype.up = function() {
      return this.root() || this.documentObject;
    };

    return XMLDocType;

  })(XMLNode);

}).call(this);


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDTDAttList, XMLNode,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = __webpack_require__(2);

  module.exports = XMLDTDAttList = (function(superClass) {
    extend(XMLDTDAttList, superClass);

    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      XMLDTDAttList.__super__.constructor.call(this, parent);
      if (elementName == null) {
        throw new Error("Missing DTD element name");
      }
      if (attributeName == null) {
        throw new Error("Missing DTD attribute name");
      }
      if (!attributeType) {
        throw new Error("Missing DTD attribute type");
      }
      if (!defaultValueType) {
        throw new Error("Missing DTD attribute default");
      }
      if (defaultValueType.indexOf('#') !== 0) {
        defaultValueType = '#' + defaultValueType;
      }
      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
      }
      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
        throw new Error("Default value only applies to #FIXED or #DEFAULT");
      }
      this.elementName = this.stringify.eleName(elementName);
      this.attributeName = this.stringify.attName(attributeName);
      this.attributeType = this.stringify.dtdAttType(attributeType);
      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
      this.defaultValueType = defaultValueType;
    }

    XMLDTDAttList.prototype.toString = function(options) {
      return this.options.writer.set(options).dtdAttList(this);
    };

    return XMLDTDAttList;

  })(XMLNode);

}).call(this);


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDTDEntity, XMLNode, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  isObject = __webpack_require__(14).isObject;

  XMLNode = __webpack_require__(2);

  module.exports = XMLDTDEntity = (function(superClass) {
    extend(XMLDTDEntity, superClass);

    function XMLDTDEntity(parent, pe, name, value) {
      XMLDTDEntity.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing entity name");
      }
      if (value == null) {
        throw new Error("Missing entity value");
      }
      this.pe = !!pe;
      this.name = this.stringify.eleName(name);
      if (!isObject(value)) {
        this.value = this.stringify.dtdEntityValue(value);
      } else {
        if (!value.pubID && !value.sysID) {
          throw new Error("Public and/or system identifiers are required for an external entity");
        }
        if (value.pubID && !value.sysID) {
          throw new Error("System identifier is required for a public external entity");
        }
        if (value.pubID != null) {
          this.pubID = this.stringify.dtdPubID(value.pubID);
        }
        if (value.sysID != null) {
          this.sysID = this.stringify.dtdSysID(value.sysID);
        }
        if (value.nData != null) {
          this.nData = this.stringify.dtdNData(value.nData);
        }
        if (this.pe && this.nData) {
          throw new Error("Notation declaration is not allowed in a parameter entity");
        }
      }
    }

    XMLDTDEntity.prototype.toString = function(options) {
      return this.options.writer.set(options).dtdEntity(this);
    };

    return XMLDTDEntity;

  })(XMLNode);

}).call(this);


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDTDElement, XMLNode,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = __webpack_require__(2);

  module.exports = XMLDTDElement = (function(superClass) {
    extend(XMLDTDElement, superClass);

    function XMLDTDElement(parent, name, value) {
      XMLDTDElement.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing DTD element name");
      }
      if (!value) {
        value = '(#PCDATA)';
      }
      if (Array.isArray(value)) {
        value = '(' + value.join(',') + ')';
      }
      this.name = this.stringify.eleName(name);
      this.value = this.stringify.dtdElementValue(value);
    }

    XMLDTDElement.prototype.toString = function(options) {
      return this.options.writer.set(options).dtdElement(this);
    };

    return XMLDTDElement;

  })(XMLNode);

}).call(this);


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDTDNotation, XMLNode,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = __webpack_require__(2);

  module.exports = XMLDTDNotation = (function(superClass) {
    extend(XMLDTDNotation, superClass);

    function XMLDTDNotation(parent, name, value) {
      XMLDTDNotation.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing notation name");
      }
      if (!value.pubID && !value.sysID) {
        throw new Error("Public or system identifiers are required for an external entity");
      }
      this.name = this.stringify.eleName(name);
      if (value.pubID != null) {
        this.pubID = this.stringify.dtdPubID(value.pubID);
      }
      if (value.sysID != null) {
        this.sysID = this.stringify.dtdSysID(value.sysID);
      }
    }

    XMLDTDNotation.prototype.toString = function(options) {
      return this.options.writer.set(options).dtdNotation(this);
    };

    return XMLDTDNotation;

  })(XMLNode);

}).call(this);


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLNode, XMLRaw,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = __webpack_require__(2);

  module.exports = XMLRaw = (function(superClass) {
    extend(XMLRaw, superClass);

    function XMLRaw(parent, text) {
      XMLRaw.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing raw text");
      }
      this.value = this.stringify.raw(text);
    }

    XMLRaw.prototype.clone = function() {
      return Object.create(this);
    };

    XMLRaw.prototype.toString = function(options) {
      return this.options.writer.set(options).raw(this);
    };

    return XMLRaw;

  })(XMLNode);

}).call(this);


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLNode, XMLText,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = __webpack_require__(2);

  module.exports = XMLText = (function(superClass) {
    extend(XMLText, superClass);

    function XMLText(parent, text) {
      XMLText.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing element text");
      }
      this.value = this.stringify.eleText(text);
    }

    XMLText.prototype.clone = function() {
      return Object.create(this);
    };

    XMLText.prototype.toString = function(options) {
      return this.options.writer.set(options).text(this);
    };

    return XMLText;

  })(XMLNode);

}).call(this);


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLNode, XMLProcessingInstruction,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = __webpack_require__(2);

  module.exports = XMLProcessingInstruction = (function(superClass) {
    extend(XMLProcessingInstruction, superClass);

    function XMLProcessingInstruction(parent, target, value) {
      XMLProcessingInstruction.__super__.constructor.call(this, parent);
      if (target == null) {
        throw new Error("Missing instruction target");
      }
      this.target = this.stringify.insTarget(target);
      if (value) {
        this.value = this.stringify.insValue(value);
      }
    }

    XMLProcessingInstruction.prototype.clone = function() {
      return Object.create(this);
    };

    XMLProcessingInstruction.prototype.toString = function(options) {
      return this.options.writer.set(options).processingInstruction(this);
    };

    return XMLProcessingInstruction;

  })(XMLNode);

}).call(this);


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(11);
var document = __webpack_require__(3).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(89);
var enumBugKeys = __webpack_require__(58);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(41);
var defined = __webpack_require__(42);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(21);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 42 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(44);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 44 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(57)('keys');
var uid = __webpack_require__(46);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 46 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(97)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(48)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(59);
var $export = __webpack_require__(8);
var redefine = __webpack_require__(98);
var hide = __webpack_require__(16);
var has = __webpack_require__(20);
var Iterators = __webpack_require__(23);
var $iterCreate = __webpack_require__(99);
var setToStringTag = __webpack_require__(25);
var getPrototypeOf = __webpack_require__(62);
var ITERATOR = __webpack_require__(1)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(101);
var global = __webpack_require__(3);
var hide = __webpack_require__(16);
var Iterators = __webpack_require__(23);
var TO_STRING_TAG = __webpack_require__(1)('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(21);
var TAG = __webpack_require__(1)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(19);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(16);
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(6);
var normalizeHeaderName = __webpack_require__(126);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(73);
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = __webpack_require__(73);
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(72)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLText, XMLWriterBase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLDeclaration = __webpack_require__(29);

  XMLDocType = __webpack_require__(30);

  XMLCData = __webpack_require__(27);

  XMLComment = __webpack_require__(28);

  XMLElement = __webpack_require__(26);

  XMLRaw = __webpack_require__(35);

  XMLText = __webpack_require__(36);

  XMLProcessingInstruction = __webpack_require__(37);

  XMLDTDAttList = __webpack_require__(31);

  XMLDTDElement = __webpack_require__(33);

  XMLDTDEntity = __webpack_require__(32);

  XMLDTDNotation = __webpack_require__(34);

  XMLWriterBase = __webpack_require__(82);

  module.exports = XMLStringWriter = (function(superClass) {
    extend(XMLStringWriter, superClass);

    function XMLStringWriter(options) {
      XMLStringWriter.__super__.constructor.call(this, options);
    }

    XMLStringWriter.prototype.document = function(doc) {
      var child, i, len, r, ref;
      this.textispresent = false;
      r = '';
      ref = doc.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        r += (function() {
          switch (false) {
            case !(child instanceof XMLDeclaration):
              return this.declaration(child);
            case !(child instanceof XMLDocType):
              return this.docType(child);
            case !(child instanceof XMLComment):
              return this.comment(child);
            case !(child instanceof XMLProcessingInstruction):
              return this.processingInstruction(child);
            default:
              return this.element(child, 0);
          }
        }).call(this);
      }
      if (this.pretty && r.slice(-this.newline.length) === this.newline) {
        r = r.slice(0, -this.newline.length);
      }
      return r;
    };

    XMLStringWriter.prototype.attribute = function(att) {
      return ' ' + att.name + '="' + att.value + '"';
    };

    XMLStringWriter.prototype.cdata = function(node, level) {
      return this.space(level) + '<![CDATA[' + node.text + ']]>' + this.newline;
    };

    XMLStringWriter.prototype.comment = function(node, level) {
      return this.space(level) + '<!-- ' + node.text + ' -->' + this.newline;
    };

    XMLStringWriter.prototype.declaration = function(node, level) {
      var r;
      r = this.space(level);
      r += '<?xml version="' + node.version + '"';
      if (node.encoding != null) {
        r += ' encoding="' + node.encoding + '"';
      }
      if (node.standalone != null) {
        r += ' standalone="' + node.standalone + '"';
      }
      r += this.spacebeforeslash + '?>';
      r += this.newline;
      return r;
    };

    XMLStringWriter.prototype.docType = function(node, level) {
      var child, i, len, r, ref;
      level || (level = 0);
      r = this.space(level);
      r += '<!DOCTYPE ' + node.root().name;
      if (node.pubID && node.sysID) {
        r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
      } else if (node.sysID) {
        r += ' SYSTEM "' + node.sysID + '"';
      }
      if (node.children.length > 0) {
        r += ' [';
        r += this.newline;
        ref = node.children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          r += (function() {
            switch (false) {
              case !(child instanceof XMLDTDAttList):
                return this.dtdAttList(child, level + 1);
              case !(child instanceof XMLDTDElement):
                return this.dtdElement(child, level + 1);
              case !(child instanceof XMLDTDEntity):
                return this.dtdEntity(child, level + 1);
              case !(child instanceof XMLDTDNotation):
                return this.dtdNotation(child, level + 1);
              case !(child instanceof XMLCData):
                return this.cdata(child, level + 1);
              case !(child instanceof XMLComment):
                return this.comment(child, level + 1);
              case !(child instanceof XMLProcessingInstruction):
                return this.processingInstruction(child, level + 1);
              default:
                throw new Error("Unknown DTD node type: " + child.constructor.name);
            }
          }).call(this);
        }
        r += ']';
      }
      r += this.spacebeforeslash + '>';
      r += this.newline;
      return r;
    };

    XMLStringWriter.prototype.element = function(node, level) {
      var att, child, i, j, len, len1, name, r, ref, ref1, ref2, space, textispresentwasset;
      level || (level = 0);
      textispresentwasset = false;
      if (this.textispresent) {
        this.newline = '';
        this.pretty = false;
      } else {
        this.newline = this.newlinedefault;
        this.pretty = this.prettydefault;
      }
      space = this.space(level);
      r = '';
      r += space + '<' + node.name;
      ref = node.attributes;
      for (name in ref) {
        if (!hasProp.call(ref, name)) continue;
        att = ref[name];
        r += this.attribute(att);
      }
      if (node.children.length === 0 || node.children.every(function(e) {
        return e.value === '';
      })) {
        if (this.allowEmpty) {
          r += '></' + node.name + '>' + this.newline;
        } else {
          r += this.spacebeforeslash + '/>' + this.newline;
        }
      } else if (this.pretty && node.children.length === 1 && (node.children[0].value != null)) {
        r += '>';
        r += node.children[0].value;
        r += '</' + node.name + '>' + this.newline;
      } else {
        if (this.dontprettytextnodes) {
          ref1 = node.children;
          for (i = 0, len = ref1.length; i < len; i++) {
            child = ref1[i];
            if (child.value != null) {
              this.textispresent++;
              textispresentwasset = true;
              break;
            }
          }
        }
        if (this.textispresent) {
          this.newline = '';
          this.pretty = false;
          space = this.space(level);
        }
        r += '>' + this.newline;
        ref2 = node.children;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          child = ref2[j];
          r += (function() {
            switch (false) {
              case !(child instanceof XMLCData):
                return this.cdata(child, level + 1);
              case !(child instanceof XMLComment):
                return this.comment(child, level + 1);
              case !(child instanceof XMLElement):
                return this.element(child, level + 1);
              case !(child instanceof XMLRaw):
                return this.raw(child, level + 1);
              case !(child instanceof XMLText):
                return this.text(child, level + 1);
              case !(child instanceof XMLProcessingInstruction):
                return this.processingInstruction(child, level + 1);
              default:
                throw new Error("Unknown XML node type: " + child.constructor.name);
            }
          }).call(this);
        }
        if (textispresentwasset) {
          this.textispresent--;
        }
        if (!this.textispresent) {
          this.newline = this.newlinedefault;
          this.pretty = this.prettydefault;
        }
        r += space + '</' + node.name + '>' + this.newline;
      }
      return r;
    };

    XMLStringWriter.prototype.processingInstruction = function(node, level) {
      var r;
      r = this.space(level) + '<?' + node.target;
      if (node.value) {
        r += ' ' + node.value;
      }
      r += this.spacebeforeslash + '?>' + this.newline;
      return r;
    };

    XMLStringWriter.prototype.raw = function(node, level) {
      return this.space(level) + node.value + this.newline;
    };

    XMLStringWriter.prototype.text = function(node, level) {
      return this.space(level) + node.value + this.newline;
    };

    XMLStringWriter.prototype.dtdAttList = function(node, level) {
      var r;
      r = this.space(level) + '<!ATTLIST ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;
      if (node.defaultValueType !== '#DEFAULT') {
        r += ' ' + node.defaultValueType;
      }
      if (node.defaultValue) {
        r += ' "' + node.defaultValue + '"';
      }
      r += this.spacebeforeslash + '>' + this.newline;
      return r;
    };

    XMLStringWriter.prototype.dtdElement = function(node, level) {
      return this.space(level) + '<!ELEMENT ' + node.name + ' ' + node.value + this.spacebeforeslash + '>' + this.newline;
    };

    XMLStringWriter.prototype.dtdEntity = function(node, level) {
      var r;
      r = this.space(level) + '<!ENTITY';
      if (node.pe) {
        r += ' %';
      }
      r += ' ' + node.name;
      if (node.value) {
        r += ' "' + node.value + '"';
      } else {
        if (node.pubID && node.sysID) {
          r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
        } else if (node.sysID) {
          r += ' SYSTEM "' + node.sysID + '"';
        }
        if (node.nData) {
          r += ' NDATA ' + node.nData;
        }
      }
      r += this.spacebeforeslash + '>' + this.newline;
      return r;
    };

    XMLStringWriter.prototype.dtdNotation = function(node, level) {
      var r;
      r = this.space(level) + '<!NOTATION ' + node.name;
      if (node.pubID && node.sysID) {
        r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
      } else if (node.pubID) {
        r += ' PUBLIC "' + node.pubID + '"';
      } else if (node.sysID) {
        r += ' SYSTEM "' + node.sysID + '"';
      }
      r += this.spacebeforeslash + '>' + this.newline;
      return r;
    };

    XMLStringWriter.prototype.openNode = function(node, level) {
      var att, name, r, ref;
      level || (level = 0);
      if (node instanceof XMLElement) {
        r = this.space(level) + '<' + node.name;
        ref = node.attributes;
        for (name in ref) {
          if (!hasProp.call(ref, name)) continue;
          att = ref[name];
          r += this.attribute(att);
        }
        r += (node.children ? '>' : '/>') + this.newline;
        return r;
      } else {
        r = this.space(level) + '<!DOCTYPE ' + node.rootNodeName;
        if (node.pubID && node.sysID) {
          r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
        } else if (node.sysID) {
          r += ' SYSTEM "' + node.sysID + '"';
        }
        r += (node.children ? ' [' : '>') + this.newline;
        return r;
      }
    };

    XMLStringWriter.prototype.closeNode = function(node, level) {
      level || (level = 0);
      switch (false) {
        case !(node instanceof XMLElement):
          return this.space(level) + '</' + node.name + '>' + this.newline;
        case !(node instanceof XMLDocType):
          return this.space(level) + ']>' + this.newline;
      }
    };

    return XMLStringWriter;

  })(XMLWriterBase);

}).call(this);


/***/ }),
/* 56 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};


/***/ }),
/* 58 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 59 */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(17);
var dPs = __webpack_require__(100);
var enumBugKeys = __webpack_require__(58);
var IE_PROTO = __webpack_require__(45)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(38)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(61).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(3).document;
module.exports = document && document.documentElement;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(20);
var toObject = __webpack_require__(22);
var IE_PROTO = __webpack_require__(45)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(108), __esModule: true };

/***/ }),
/* 65 */
/***/ (function(module, exports) {



/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(17);
var aFunction = __webpack_require__(19);
var SPECIES = __webpack_require__(1)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(15);
var invoke = __webpack_require__(113);
var html = __webpack_require__(61);
var cel = __webpack_require__(38);
var global = __webpack_require__(3);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(21)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 68 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(17);
var isObject = __webpack_require__(11);
var newPromiseCapability = __webpack_require__(52);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var core = __webpack_require__(4);
var dP = __webpack_require__(12);
var DESCRIPTORS = __webpack_require__(13);
var SPECIES = __webpack_require__(1)('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),
/* 72 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(6);
var settle = __webpack_require__(127);
var buildURL = __webpack_require__(129);
var parseHeaders = __webpack_require__(130);
var isURLSameOrigin = __webpack_require__(131);
var createError = __webpack_require__(74);
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(132);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if (!window.XMLHttpRequest &&
        process.env.NODE_ENV !== 'test' &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(133);

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(72)))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(128);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(46)('meta');
var isObject = __webpack_require__(11);
var has = __webpack_require__(20);
var setDesc = __webpack_require__(12).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(18)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(11);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(8);
var core = __webpack_require__(4);
var fails = __webpack_require__(18);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 80 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLAttribute;

  module.exports = XMLAttribute = (function() {
    function XMLAttribute(parent, name, value) {
      this.options = parent.options;
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing attribute name of element " + parent.name);
      }
      if (value == null) {
        throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
      }
      this.name = this.stringify.attName(name);
      this.value = this.stringify.attValue(value);
    }

    XMLAttribute.prototype.clone = function() {
      return Object.create(this);
    };

    XMLAttribute.prototype.toString = function(options) {
      return this.options.writer.set(options).attribute(this);
    };

    return XMLAttribute;

  })();

}).call(this);


/***/ }),
/* 81 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLStringifier,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  module.exports = XMLStringifier = (function() {
    function XMLStringifier(options) {
      this.assertLegalChar = bind(this.assertLegalChar, this);
      var key, ref, value;
      options || (options = {});
      this.noDoubleEncoding = options.noDoubleEncoding;
      ref = options.stringify || {};
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this[key] = value;
      }
    }

    XMLStringifier.prototype.eleName = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.eleText = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(this.elEscape(val));
    };

    XMLStringifier.prototype.cdata = function(val) {
      val = '' + val || '';
      val = val.replace(']]>', ']]]]><![CDATA[>');
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.comment = function(val) {
      val = '' + val || '';
      if (val.match(/--/)) {
        throw new Error("Comment text cannot contain double-hypen: " + val);
      }
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.raw = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.attName = function(val) {
      return val = '' + val || '';
    };

    XMLStringifier.prototype.attValue = function(val) {
      val = '' + val || '';
      return this.attEscape(val);
    };

    XMLStringifier.prototype.insTarget = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.insValue = function(val) {
      val = '' + val || '';
      if (val.match(/\?>/)) {
        throw new Error("Invalid processing instruction value: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlVersion = function(val) {
      val = '' + val || '';
      if (!val.match(/1\.[0-9]+/)) {
        throw new Error("Invalid version number: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlEncoding = function(val) {
      val = '' + val || '';
      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {
        throw new Error("Invalid encoding: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlStandalone = function(val) {
      if (val) {
        return "yes";
      } else {
        return "no";
      }
    };

    XMLStringifier.prototype.dtdPubID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdSysID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdElementValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttType = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttDefault = function(val) {
      if (val != null) {
        return '' + val || '';
      } else {
        return val;
      }
    };

    XMLStringifier.prototype.dtdEntityValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdNData = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.convertAttKey = '@';

    XMLStringifier.prototype.convertPIKey = '?';

    XMLStringifier.prototype.convertTextKey = '#text';

    XMLStringifier.prototype.convertCDataKey = '#cdata';

    XMLStringifier.prototype.convertCommentKey = '#comment';

    XMLStringifier.prototype.convertRawKey = '#raw';

    XMLStringifier.prototype.assertLegalChar = function(str) {
      var res;
      res = str.match(/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/);
      if (res) {
        throw new Error("Invalid character in string: " + str + " at index " + res.index);
      }
      return str;
    };

    XMLStringifier.prototype.elEscape = function(str) {
      var ampregex;
      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
    };

    XMLStringifier.prototype.attEscape = function(str) {
      var ampregex;
      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
    };

    return XMLStringifier;

  })();

}).call(this);


/***/ }),
/* 82 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLWriterBase,
    hasProp = {}.hasOwnProperty;

  module.exports = XMLWriterBase = (function() {
    function XMLWriterBase(options) {
      var key, ref, ref1, ref2, ref3, ref4, ref5, ref6, value;
      options || (options = {});
      this.pretty = options.pretty || false;
      this.allowEmpty = (ref = options.allowEmpty) != null ? ref : false;
      if (this.pretty) {
        this.indent = (ref1 = options.indent) != null ? ref1 : '  ';
        this.newline = (ref2 = options.newline) != null ? ref2 : '\n';
        this.offset = (ref3 = options.offset) != null ? ref3 : 0;
        this.dontprettytextnodes = (ref4 = options.dontprettytextnodes) != null ? ref4 : 0;
      } else {
        this.indent = '';
        this.newline = '';
        this.offset = 0;
        this.dontprettytextnodes = 0;
      }
      this.spacebeforeslash = (ref5 = options.spacebeforeslash) != null ? ref5 : '';
      if (this.spacebeforeslash === true) {
        this.spacebeforeslash = ' ';
      }
      this.newlinedefault = this.newline;
      this.prettydefault = this.pretty;
      ref6 = options.writer || {};
      for (key in ref6) {
        if (!hasProp.call(ref6, key)) continue;
        value = ref6[key];
        this[key] = value;
      }
    }

    XMLWriterBase.prototype.set = function(options) {
      var key, ref, value;
      options || (options = {});
      if ("pretty" in options) {
        this.pretty = options.pretty;
      }
      if ("allowEmpty" in options) {
        this.allowEmpty = options.allowEmpty;
      }
      if (this.pretty) {
        this.indent = "indent" in options ? options.indent : '  ';
        this.newline = "newline" in options ? options.newline : '\n';
        this.offset = "offset" in options ? options.offset : 0;
        this.dontprettytextnodes = "dontprettytextnodes" in options ? options.dontprettytextnodes : 0;
      } else {
        this.indent = '';
        this.newline = '';
        this.offset = 0;
        this.dontprettytextnodes = 0;
      }
      this.spacebeforeslash = "spacebeforeslash" in options ? options.spacebeforeslash : '';
      if (this.spacebeforeslash === true) {
        this.spacebeforeslash = ' ';
      }
      this.newlinedefault = this.newline;
      this.prettydefault = this.pretty;
      ref = options.writer || {};
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this[key] = value;
      }
      return this;
    };

    XMLWriterBase.prototype.space = function(level) {
      var indent;
      if (this.pretty) {
        indent = (level || 0) + this.offset + 1;
        if (indent > 0) {
          return new Array(indent).join(this.indent);
        } else {
          return '';
        }
      } else {
        return '';
      }
    };

    return XMLWriterBase;

  })();

}).call(this);


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(7);

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var Connection_1 = __webpack_require__(94);
var Session_1 = __webpack_require__(141);
var Data_1 = __webpack_require__(167);
var Admin_1 = __webpack_require__(168);
var Helpdesk_1 = __webpack_require__(169);
var Knowledgebase_1 = __webpack_require__(170);
var Mylibrary_1 = __webpack_require__(171);
var Reporting_1 = __webpack_require__(172);
var Selfservice_1 = __webpack_require__(173);
var Survey_1 = __webpack_require__(174);
var System_1 = __webpack_require__(175);
var URL = __webpack_require__(176);

var XmlMethodCall = function XmlMethodCall() {
    var server = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'localhost';
    var port = arguments[1];
    var opts = arguments[2];
    (0, _classCallCheck3.default)(this, XmlMethodCall);

    if (server.match(/^(http:\/\/)/)) {
        server = URL(server).host;
        port = 80;
    } else {
        port = server.match(/^(https:\/\/)/) ? 443 : port || 5015;
        server = port === 443 ? URL(server).host : server;
    }
    var defaultOpts = {
        data: {
            formatValues: true
        }
    };
    this.connection = new Connection_1.Connection(server, port);
    this.session = new Session_1.Session(this.connection, this);
    this.data = new Data_1.Data(this.connection, this);
    this.admin = new Admin_1.Admin(this.connection, this);
    this.helpdesk = new Helpdesk_1.Helpdesk(this.connection, this);
    this.knowledgebase = new Knowledgebase_1.Knowledgebase(this.connection, this);
    this.myLibrary = new Mylibrary_1.Mylibrary(this.connection, this);
    this.reporting = new Reporting_1.Reporting(this.connection, this);
    this.selfservice = new Selfservice_1.Selfservice(this.connection, this);
    this.survey = new Survey_1.Survey(this.connection, this);
    this.system = new System_1.System(this.connection, this);
    this.opts = (0, _assign2.default)({}, defaultOpts, opts);
};

exports.XmlMethodCall = XmlMethodCall;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(85);
module.exports = __webpack_require__(4).Object.assign;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(8);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(88) });


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(13) && !__webpack_require__(18)(function () {
  return Object.defineProperty(__webpack_require__(38)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(11);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(39);
var gOPS = __webpack_require__(92);
var pIE = __webpack_require__(93);
var toObject = __webpack_require__(22);
var IObject = __webpack_require__(41);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(18)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(20);
var toIObject = __webpack_require__(40);
var arrayIndexOf = __webpack_require__(90)(false);
var IE_PROTO = __webpack_require__(45)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(40);
var toLength = __webpack_require__(43);
var toAbsoluteIndex = __webpack_require__(91);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(44);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 92 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 93 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _iterator = __webpack_require__(95);

var _iterator2 = _interopRequireDefault(_iterator);

var _assign = __webpack_require__(7);

var _assign2 = _interopRequireDefault(_assign);

var _objectWithoutProperties2 = __webpack_require__(104);

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _regenerator = __webpack_require__(105);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = __webpack_require__(64);

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = __webpack_require__(118);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(5);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __webpack_require__(122);

var Connection = function () {
    /**
     * Create a connection. Defers to the private _connect method.
     * @param {string} server - IP or FQDN to send the requests to
     * @param {number} port - Port to use when sending the requests. For https use 443. Defaults to 5015.
     */
    function Connection() {
        var server = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'localhost';
        var port = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5015;
        (0, _classCallCheck3.default)(this, Connection);

        this.server = server;
        this.port = port;
        this.https = false;
        this._connect(server, port);
    }
    /**
     * private connect method. Responsible for inferring https.
     * Creates an instance of axios to use to send requests to and from the server.
     * @param server
     * @param port
     * @returns {*}
     * @private
     */


    (0, _createClass3.default)(Connection, [{
        key: "_connect",
        value: function _connect(server, port) {
            var url = void 0;
            switch (port) {
                case 443:
                    this.https = true;
                    url = "https://" + server + "/sw/";
                    break;
                case 80:
                    url = "http://" + server + "/sw/";
                    break;
                default:
                    url = "http://" + server + ":" + port;
            }
            this.endpoint = axios_1.default.create({
                baseURL: url,
                withCredentials: true,
                headers: {
                    "Content-Type": "text/xmlmc",
                    "Charset": "UTF-8",
                    "Accept": "text/json",
                    "Accept-Charset": "UTF-8",
                    "Cache-Control": "no-cache"
                },
                transformResponse: transformResponse
            });
        }
        /**
         * @param xmlmc
         * @returns {Promise.<Response>}
         * @throws Module importing error. Occurs if for some reason we were unable to require the underlying modules. Indicates a problem with the library, not the developer.
         */

    }, {
        key: "sendRequest",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(xmlmc) {
                var _this = this;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return _context.abrupt("return", new _promise2.default(function (resolve, reject) {
                                    var post = _this.port === 80 || _this.https ? '/xmlmc/' : '/sw';
                                    _this.endpoint.post(post, xmlmc.toString(), { withCredentials: true }).then(function (response) {
                                        response.data.status ? resolve(response.data) : reject(response.data);
                                    }).catch(function (err) {
                                        reject(err);
                                    });
                                }));

                            case 1:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function sendRequest(_x3) {
                return _ref.apply(this, arguments);
            }

            return sendRequest;
        }()
    }]);
    return Connection;
}();

exports.Connection = Connection;
function transformResponse(response) {
    var parsedResponse = JSON.parse(response);
    var _parsedResponse = parsedResponse,
        status = _parsedResponse['@status'],
        data = _parsedResponse.data,
        rest = (0, _objectWithoutProperties3.default)(_parsedResponse, ['@status', "data"]);

    parsedResponse = (0, _assign2.default)({ status: status, params: {}, data: [] }, rest);
    data = isIterable(data) && data;
    if (data) {
        parsedResponse.data = handleDataParam(data);
        if (data.hasOwnProperty('metaData')) {
            parsedResponse.params.metadata = data.metaData;
        }
        if (data.hasOwnProperty('generatedId')) {
            parsedResponse.params.generatedId = data.generatedId;
        }
    }
    return parsedResponse;
}
function handleDataParam(data) {
    if (Array.isArray(data)) {
        return data;
    }
    if (data.hasOwnProperty('rowData')) {
        return Array.isArray(data.rowData.row) && data.rowData.row || [data.rowData.row];
    }
}
function isIterable(obj) {
    // checks for null and undefined
    if (obj == null) {
        return false;
    }
    return Object(obj) === obj || typeof obj[_iterator2.default] === 'function';
}

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(96), __esModule: true };

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(47);
__webpack_require__(49);
module.exports = __webpack_require__(103).f('iterator');


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(44);
var defined = __webpack_require__(42);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(16);


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(60);
var descriptor = __webpack_require__(56);
var setToStringTag = __webpack_require__(25);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(16)(IteratorPrototype, __webpack_require__(1)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(12);
var anObject = __webpack_require__(17);
var getKeys = __webpack_require__(39);

module.exports = __webpack_require__(13) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(102);
var step = __webpack_require__(63);
var Iterators = __webpack_require__(23);
var toIObject = __webpack_require__(40);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(48)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 102 */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(1);


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(106);


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(107);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 107 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(65);
__webpack_require__(47);
__webpack_require__(49);
__webpack_require__(109);
__webpack_require__(116);
__webpack_require__(117);
module.exports = __webpack_require__(4).Promise;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(59);
var global = __webpack_require__(3);
var ctx = __webpack_require__(15);
var classof = __webpack_require__(50);
var $export = __webpack_require__(8);
var isObject = __webpack_require__(11);
var aFunction = __webpack_require__(19);
var anInstance = __webpack_require__(51);
var forOf = __webpack_require__(24);
var speciesConstructor = __webpack_require__(66);
var task = __webpack_require__(67).set;
var microtask = __webpack_require__(114)();
var newPromiseCapabilityModule = __webpack_require__(52);
var perform = __webpack_require__(68);
var promiseResolve = __webpack_require__(69);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(1)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value);
            if (domain) domain.exit();
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  if (promise._h == 1) return false;
  var chain = promise._a || promise._c;
  var i = 0;
  var reaction;
  while (chain.length > i) {
    reaction = chain[i++];
    if (reaction.fail || !isUnhandled(reaction.promise)) return false;
  } return true;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(53)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(25)($Promise, PROMISE);
__webpack_require__(70)(PROMISE);
Wrapper = __webpack_require__(4)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(115)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(17);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(23);
var ITERATOR = __webpack_require__(1)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(50);
var ITERATOR = __webpack_require__(1)('iterator');
var Iterators = __webpack_require__(23);
module.exports = __webpack_require__(4).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 113 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var macrotask = __webpack_require__(67).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(21)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if (Observer) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    var promise = Promise.resolve();
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(1)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(8);
var core = __webpack_require__(4);
var global = __webpack_require__(3);
var speciesConstructor = __webpack_require__(66);
var promiseResolve = __webpack_require__(69);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(8);
var newPromiseCapability = __webpack_require__(52);
var perform = __webpack_require__(68);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _promise = __webpack_require__(64);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(120), __esModule: true };

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(121);
var $Object = __webpack_require__(4).Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(8);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(13), 'Object', { defineProperty: __webpack_require__(12).f });


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(123);

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6);
var bind = __webpack_require__(71);
var Axios = __webpack_require__(125);
var defaults = __webpack_require__(54);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(76);
axios.CancelToken = __webpack_require__(139);
axios.isCancel = __webpack_require__(75);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(140);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),
/* 124 */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = __webpack_require__(54);
var utils = __webpack_require__(6);
var InterceptorManager = __webpack_require__(134);
var dispatchRequest = __webpack_require__(135);

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(74);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6);

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      }

      if (!utils.isArray(val)) {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6);

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6);
var transformData = __webpack_require__(136);
var isCancel = __webpack_require__(75);
var defaults = __webpack_require__(54);
var isAbsoluteURL = __webpack_require__(137);
var combineURLs = __webpack_require__(138);

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(76);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(7);

var _assign2 = _interopRequireDefault(_assign);

var _map = __webpack_require__(9);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(5);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var Request_1 = __webpack_require__(10);

var Session = function () {
    function Session(connection, xmlmc) {
        (0, _classCallCheck3.default)(this, Session);

        this.connection = connection;
        this.xmlmc = xmlmc;
        this.service = 'session';
        this.paramMap = new _map2.default([['analystLogoff', ['sessionId']], ['analystLogon', ['userId', 'password']], ['analystLogonTrust', ['userId', 'secretKey']], ['bindSession', ['sessionId']], ['changePassword', ['oldPassword', 'newPassword']], ['convertDateTimeInText', ['inputText']], ['getSessionInfo', ['sessionId']], ['getSessionInfo2', ['sessionId']], ['hasRight', ['userRight']], ['isSessionValid', ['sessionId']], ['lockCustomerAccount', ['selfServiceInstance', 'customerId', 'permanent', 'duration']], ['selfServiceLogon', ['selfServiceInstance', 'customerId', 'password']], ['setDatabaseRight', ['tableName', 'rightFlag', 'rightAllowed']], ['setOutputValidation', ['validateResultMessage']], ['setUserRight', ['rightClass', 'rightFlag', 'rightAllowed']], ['setVariable', ['sessionVariable']], ['switchAnalystContext', ['groupId', 'analystId']], ['unlockCustomerAccount', ['selfServiceInstance', 'customerId']]]);
    }

    (0, _createClass3.default)(Session, [{
        key: "analystLogoff",
        value: function analystLogoff(optionalParams) {
            var request = new Request_1.Request(this.service, 'analystLogoff', optionalParams || {}, this.paramMap.get('analystLogoff') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "analystLogon",
        value: function analystLogon(userId, password, optionalParams) {
            var request = new Request_1.Request(this.service, 'analystLogon', (0, _assign2.default)({}, {
                userId: userId,
                password: password
            }, optionalParams || {}), this.paramMap.get('analystLogon') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "analystLogonTrust",
        value: function analystLogonTrust(userId, secretKey, optionalParams) {
            var request = new Request_1.Request(this.service, 'analystLogonTrust', (0, _assign2.default)({}, {
                userId: userId,
                secretKey: secretKey
            }, optionalParams || {}), this.paramMap.get('analystLogonTrust') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "bindSession",
        value: function bindSession(sessionId, optionalParams) {
            var request = new Request_1.Request(this.service, 'bindSession', (0, _assign2.default)({}, { sessionId: sessionId }, optionalParams || {}), this.paramMap.get('bindSession') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "changePassword",
        value: function changePassword(oldPassword, newPassword, optionalParams) {
            var request = new Request_1.Request(this.service, 'changePassword', (0, _assign2.default)({}, {
                oldPassword: oldPassword,
                newPassword: newPassword
            }, optionalParams || {}), this.paramMap.get('changePassword') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "closeLocalSession",
        value: function closeLocalSession(optionalParams) {
            var request = new Request_1.Request(this.service, 'closeLocalSession', optionalParams || {}, this.paramMap.get('closeLocalSession') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "convertDateTimeInText",
        value: function convertDateTimeInText(inputText, optionalParams) {
            var request = new Request_1.Request(this.service, 'convertDateTimeInText', (0, _assign2.default)({}, { inputText: inputText }, optionalParams || {}), this.paramMap.get('convertDateTimeInText') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "createLocalSession",
        value: function createLocalSession(optionalParams) {
            var request = new Request_1.Request(this.service, 'createLocalSession', optionalParams || {}, this.paramMap.get('createLocalSession') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getSessionDDInfo",
        value: function getSessionDDInfo(optionalParams) {
            var request = new Request_1.Request(this.service, 'getSessionDDInfo', optionalParams || {}, this.paramMap.get('getSessionDDInfo') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getSessionInfo",
        value: function getSessionInfo(optionalParams) {
            var request = new Request_1.Request(this.service, 'getSessionInfo', optionalParams || {}, this.paramMap.get('getSessionInfo') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getSessionInfo2",
        value: function getSessionInfo2(optionalParams) {
            var request = new Request_1.Request(this.service, 'getSessionInfo2', optionalParams || {}, this.paramMap.get('getSessionInfo2') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "hasRight",
        value: function hasRight(userRight, optionalParams) {
            var request = new Request_1.Request(this.service, 'hasRight', (0, _assign2.default)({}, { userRight: userRight }, optionalParams || {}), this.paramMap.get('hasRight') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "isSessionValid",
        value: function isSessionValid(optionalParams) {
            var request = new Request_1.Request(this.service, 'isSessionValid', optionalParams || {}, this.paramMap.get('isSessionValid') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "lockCustomerAccount",
        value: function lockCustomerAccount(selfServiceInstance, customerId, permanent, optionalParams) {
            var request = new Request_1.Request(this.service, 'lockCustomerAccount', (0, _assign2.default)({}, {
                selfServiceInstance: selfServiceInstance,
                customerId: customerId,
                permanent: permanent
            }, optionalParams || {}), this.paramMap.get('lockCustomerAccount') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "selfServiceLogoff",
        value: function selfServiceLogoff(optionalParams) {
            var request = new Request_1.Request(this.service, 'selfServiceLogoff', optionalParams || {}, this.paramMap.get('selfServiceLogoff') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "selfServiceLogon",
        value: function selfServiceLogon(selfServiceInstance, customerId, password, optionalParams) {
            var request = new Request_1.Request(this.service, 'selfServiceLogon', (0, _assign2.default)({}, {
                selfServiceInstance: selfServiceInstance,
                customerId: customerId,
                password: password
            }, optionalParams || {}), this.paramMap.get('selfServiceLogon') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "setDatabaseRight",
        value: function setDatabaseRight(tableName, rightFlag, rightAllowed, optionalParams) {
            var request = new Request_1.Request(this.service, 'setDatabaseRight', (0, _assign2.default)({}, {
                tableName: tableName,
                rightFlag: rightFlag,
                rightAllowed: rightAllowed
            }, optionalParams || {}), this.paramMap.get('setDatabaseRight') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "setOutputValidation",
        value: function setOutputValidation(validateResultMessage, optionalParams) {
            var request = new Request_1.Request(this.service, 'setOutputValidation', (0, _assign2.default)({}, { validateResultMessage: validateResultMessage }, optionalParams || {}), this.paramMap.get('setOutputValidation') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "setUserRight",
        value: function setUserRight(rightClass, rightFlag, rightAllowed, optionalParams) {
            var request = new Request_1.Request(this.service, 'setUserRight', (0, _assign2.default)({}, {
                rightClass: rightClass,
                rightFlag: rightFlag,
                rightAllowed: rightAllowed
            }, optionalParams || {}), this.paramMap.get('setUserRight') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "setVariable",
        value: function setVariable(sessionVariable, optionalParams) {
            var request = new Request_1.Request(this.service, 'setVariable', (0, _assign2.default)({}, { sessionVariable: sessionVariable }, optionalParams || {}), this.paramMap.get('setVariable') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "switchAnalystContext",
        value: function switchAnalystContext(groupId, optionalParams) {
            var request = new Request_1.Request(this.service, 'switchAnalystContext', (0, _assign2.default)({}, { groupId: groupId }, optionalParams || {}), this.paramMap.get('switchAnalystContext') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "unlockCustomerAccount",
        value: function unlockCustomerAccount(selfServiceInstance, customerId, optionalParams) {
            var request = new Request_1.Request(this.service, 'unlockCustomerAccount', (0, _assign2.default)({}, {
                selfServiceInstance: selfServiceInstance,
                customerId: customerId
            }, optionalParams || {}), this.paramMap.get('unlockCustomerAccount') || []);
            return this.connection.sendRequest(request);
        }
    }]);
    return Session;
}();

exports.Session = Session;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(65);
__webpack_require__(47);
__webpack_require__(49);
__webpack_require__(143);
__webpack_require__(150);
__webpack_require__(153);
__webpack_require__(155);
module.exports = __webpack_require__(4).Map;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(144);
var validate = __webpack_require__(78);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(145)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(12).f;
var create = __webpack_require__(60);
var redefineAll = __webpack_require__(53);
var ctx = __webpack_require__(15);
var anInstance = __webpack_require__(51);
var forOf = __webpack_require__(24);
var $iterDefine = __webpack_require__(48);
var step = __webpack_require__(63);
var setSpecies = __webpack_require__(70);
var DESCRIPTORS = __webpack_require__(13);
var fastKey = __webpack_require__(77).fastKey;
var validate = __webpack_require__(78);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var $export = __webpack_require__(8);
var meta = __webpack_require__(77);
var fails = __webpack_require__(18);
var hide = __webpack_require__(16);
var redefineAll = __webpack_require__(53);
var forOf = __webpack_require__(24);
var anInstance = __webpack_require__(51);
var isObject = __webpack_require__(11);
var setToStringTag = __webpack_require__(25);
var dP = __webpack_require__(12).f;
var each = __webpack_require__(146)(0);
var DESCRIPTORS = __webpack_require__(13);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function (target, iterable) {
      anInstance(target, C, NAME, '_c');
      target._c = new Base();
      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
        anInstance(this, C, KEY);
        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    IS_WEAK || dP(C.prototype, 'size', {
      get: function () {
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(15);
var IObject = __webpack_require__(41);
var toObject = __webpack_require__(22);
var toLength = __webpack_require__(43);
var asc = __webpack_require__(147);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(148);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(11);
var isArray = __webpack_require__(149);
var SPECIES = __webpack_require__(1)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(21);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(8);

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(151)('Map') });


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(50);
var from = __webpack_require__(152);
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(24);

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(154)('Map');


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(8);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(156)('Map');


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(8);
var aFunction = __webpack_require__(19);
var ctx = __webpack_require__(15);
var forOf = __webpack_require__(24);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(158), __esModule: true };

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(159);
module.exports = __webpack_require__(4).Object.getPrototypeOf;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(22);
var $getPrototypeOf = __webpack_require__(62);

__webpack_require__(79)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(161), __esModule: true };

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(162);
module.exports = __webpack_require__(4).Object.keys;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(22);
var $keys = __webpack_require__(39);

__webpack_require__(79)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;

  ref = __webpack_require__(14), assign = ref.assign, isFunction = ref.isFunction;

  XMLDocument = __webpack_require__(164);

  XMLDocumentCB = __webpack_require__(165);

  XMLStringWriter = __webpack_require__(55);

  XMLStreamWriter = __webpack_require__(166);

  module.exports.create = function(name, xmldec, doctype, options) {
    var doc, root;
    if (name == null) {
      throw new Error("Root element needs a name");
    }
    options = assign({}, xmldec, doctype, options);
    doc = new XMLDocument(options);
    root = doc.element(name);
    if (!options.headless) {
      doc.declaration(options);
      if ((options.pubID != null) || (options.sysID != null)) {
        doc.doctype(options);
      }
    }
    return root;
  };

  module.exports.begin = function(options, onData, onEnd) {
    var ref1;
    if (isFunction(options)) {
      ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];
      options = {};
    }
    if (onData) {
      return new XMLDocumentCB(options, onData, onEnd);
    } else {
      return new XMLDocument(options);
    }
  };

  module.exports.stringWriter = function(options) {
    return new XMLStringWriter(options);
  };

  module.exports.streamWriter = function(stream, options) {
    return new XMLStreamWriter(stream, options);
  };

}).call(this);


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  isPlainObject = __webpack_require__(14).isPlainObject;

  XMLNode = __webpack_require__(2);

  XMLStringifier = __webpack_require__(81);

  XMLStringWriter = __webpack_require__(55);

  module.exports = XMLDocument = (function(superClass) {
    extend(XMLDocument, superClass);

    function XMLDocument(options) {
      XMLDocument.__super__.constructor.call(this, null);
      options || (options = {});
      if (!options.writer) {
        options.writer = new XMLStringWriter();
      }
      this.options = options;
      this.stringify = new XMLStringifier(options);
      this.isDocument = true;
    }

    XMLDocument.prototype.end = function(writer) {
      var writerOptions;
      if (!writer) {
        writer = this.options.writer;
      } else if (isPlainObject(writer)) {
        writerOptions = writer;
        writer = this.options.writer.set(writerOptions);
      }
      return writer.document(this);
    };

    XMLDocument.prototype.toString = function(options) {
      return this.options.writer.set(options).document(this);
    };

    return XMLDocument;

  })(XMLNode);

}).call(this);


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, isFunction, isObject, isPlainObject, ref,
    hasProp = {}.hasOwnProperty;

  ref = __webpack_require__(14), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject;

  XMLElement = __webpack_require__(26);

  XMLCData = __webpack_require__(27);

  XMLComment = __webpack_require__(28);

  XMLRaw = __webpack_require__(35);

  XMLText = __webpack_require__(36);

  XMLProcessingInstruction = __webpack_require__(37);

  XMLDeclaration = __webpack_require__(29);

  XMLDocType = __webpack_require__(30);

  XMLDTDAttList = __webpack_require__(31);

  XMLDTDEntity = __webpack_require__(32);

  XMLDTDElement = __webpack_require__(33);

  XMLDTDNotation = __webpack_require__(34);

  XMLAttribute = __webpack_require__(80);

  XMLStringifier = __webpack_require__(81);

  XMLStringWriter = __webpack_require__(55);

  module.exports = XMLDocumentCB = (function() {
    function XMLDocumentCB(options, onData, onEnd) {
      var writerOptions;
      options || (options = {});
      if (!options.writer) {
        options.writer = new XMLStringWriter(options);
      } else if (isPlainObject(options.writer)) {
        writerOptions = options.writer;
        options.writer = new XMLStringWriter(writerOptions);
      }
      this.options = options;
      this.writer = options.writer;
      this.stringify = new XMLStringifier(options);
      this.onDataCallback = onData || function() {};
      this.onEndCallback = onEnd || function() {};
      this.currentNode = null;
      this.currentLevel = -1;
      this.openTags = {};
      this.documentStarted = false;
      this.documentCompleted = false;
      this.root = null;
    }

    XMLDocumentCB.prototype.node = function(name, attributes, text) {
      var ref1;
      if (name == null) {
        throw new Error("Missing node name");
      }
      if (this.root && this.currentLevel === -1) {
        throw new Error("Document can only have one root node");
      }
      this.openCurrent();
      name = name.valueOf();
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
      }
      this.currentNode = new XMLElement(this, name, attributes);
      this.currentNode.children = false;
      this.currentLevel++;
      this.openTags[this.currentLevel] = this.currentNode;
      if (text != null) {
        this.text(text);
      }
      return this;
    };

    XMLDocumentCB.prototype.element = function(name, attributes, text) {
      if (this.currentNode && this.currentNode instanceof XMLDocType) {
        return this.dtdElement.apply(this, arguments);
      } else {
        return this.node(name, attributes, text);
      }
    };

    XMLDocumentCB.prototype.attribute = function(name, value) {
      var attName, attValue;
      if (!this.currentNode || this.currentNode.children) {
        throw new Error("att() can only be used immediately after an ele() call in callback mode");
      }
      if (name != null) {
        name = name.valueOf();
      }
      if (isObject(name)) {
        for (attName in name) {
          if (!hasProp.call(name, attName)) continue;
          attValue = name[attName];
          this.attribute(attName, attValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        if (!this.options.skipNullAttributes || (value != null)) {
          this.currentNode.attributes[name] = new XMLAttribute(this, name, value);
        }
      }
      return this;
    };

    XMLDocumentCB.prototype.text = function(value) {
      var node;
      this.openCurrent();
      node = new XMLText(this, value);
      this.onData(this.writer.text(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.cdata = function(value) {
      var node;
      this.openCurrent();
      node = new XMLCData(this, value);
      this.onData(this.writer.cdata(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.comment = function(value) {
      var node;
      this.openCurrent();
      node = new XMLComment(this, value);
      this.onData(this.writer.comment(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.raw = function(value) {
      var node;
      this.openCurrent();
      node = new XMLRaw(this, value);
      this.onData(this.writer.raw(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.instruction = function(target, value) {
      var i, insTarget, insValue, len, node;
      this.openCurrent();
      if (target != null) {
        target = target.valueOf();
      }
      if (value != null) {
        value = value.valueOf();
      }
      if (Array.isArray(target)) {
        for (i = 0, len = target.length; i < len; i++) {
          insTarget = target[i];
          this.instruction(insTarget);
        }
      } else if (isObject(target)) {
        for (insTarget in target) {
          if (!hasProp.call(target, insTarget)) continue;
          insValue = target[insTarget];
          this.instruction(insTarget, insValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        node = new XMLProcessingInstruction(this, target, value);
        this.onData(this.writer.processingInstruction(node, this.currentLevel + 1));
      }
      return this;
    };

    XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {
      var node;
      this.openCurrent();
      if (this.documentStarted) {
        throw new Error("declaration() must be the first node");
      }
      node = new XMLDeclaration(this, version, encoding, standalone);
      this.onData(this.writer.declaration(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {
      this.openCurrent();
      if (root == null) {
        throw new Error("Missing root node name");
      }
      if (this.root) {
        throw new Error("dtd() must come before the root node");
      }
      this.currentNode = new XMLDocType(this, pubID, sysID);
      this.currentNode.rootNodeName = root;
      this.currentNode.children = false;
      this.currentLevel++;
      this.openTags[this.currentLevel] = this.currentNode;
      return this;
    };

    XMLDocumentCB.prototype.dtdElement = function(name, value) {
      var node;
      this.openCurrent();
      node = new XMLDTDElement(this, name, value);
      this.onData(this.writer.dtdElement(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      var node;
      this.openCurrent();
      node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
      this.onData(this.writer.dtdAttList(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.entity = function(name, value) {
      var node;
      this.openCurrent();
      node = new XMLDTDEntity(this, false, name, value);
      this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.pEntity = function(name, value) {
      var node;
      this.openCurrent();
      node = new XMLDTDEntity(this, true, name, value);
      this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.notation = function(name, value) {
      var node;
      this.openCurrent();
      node = new XMLDTDNotation(this, name, value);
      this.onData(this.writer.dtdNotation(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.up = function() {
      if (this.currentLevel < 0) {
        throw new Error("The document node has no parent");
      }
      if (this.currentNode) {
        if (this.currentNode.children) {
          this.closeNode(this.currentNode);
        } else {
          this.openNode(this.currentNode);
        }
        this.currentNode = null;
      } else {
        this.closeNode(this.openTags[this.currentLevel]);
      }
      delete this.openTags[this.currentLevel];
      this.currentLevel--;
      return this;
    };

    XMLDocumentCB.prototype.end = function() {
      while (this.currentLevel >= 0) {
        this.up();
      }
      return this.onEnd();
    };

    XMLDocumentCB.prototype.openCurrent = function() {
      if (this.currentNode) {
        this.currentNode.children = true;
        return this.openNode(this.currentNode);
      }
    };

    XMLDocumentCB.prototype.openNode = function(node) {
      if (!node.isOpen) {
        if (!this.root && this.currentLevel === 0 && node instanceof XMLElement) {
          this.root = node;
        }
        this.onData(this.writer.openNode(node, this.currentLevel));
        return node.isOpen = true;
      }
    };

    XMLDocumentCB.prototype.closeNode = function(node) {
      if (!node.isClosed) {
        this.onData(this.writer.closeNode(node, this.currentLevel));
        return node.isClosed = true;
      }
    };

    XMLDocumentCB.prototype.onData = function(chunk) {
      this.documentStarted = true;
      return this.onDataCallback(chunk);
    };

    XMLDocumentCB.prototype.onEnd = function() {
      this.documentCompleted = true;
      return this.onEndCallback();
    };

    XMLDocumentCB.prototype.ele = function() {
      return this.element.apply(this, arguments);
    };

    XMLDocumentCB.prototype.nod = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLDocumentCB.prototype.txt = function(value) {
      return this.text(value);
    };

    XMLDocumentCB.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLDocumentCB.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLDocumentCB.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {
      return this.declaration(version, encoding, standalone);
    };

    XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {
      return this.doctype(root, pubID, sysID);
    };

    XMLDocumentCB.prototype.e = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLDocumentCB.prototype.n = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLDocumentCB.prototype.t = function(value) {
      return this.text(value);
    };

    XMLDocumentCB.prototype.d = function(value) {
      return this.cdata(value);
    };

    XMLDocumentCB.prototype.c = function(value) {
      return this.comment(value);
    };

    XMLDocumentCB.prototype.r = function(value) {
      return this.raw(value);
    };

    XMLDocumentCB.prototype.i = function(target, value) {
      return this.instruction(target, value);
    };

    XMLDocumentCB.prototype.att = function() {
      if (this.currentNode && this.currentNode instanceof XMLDocType) {
        return this.attList.apply(this, arguments);
      } else {
        return this.attribute.apply(this, arguments);
      }
    };

    XMLDocumentCB.prototype.a = function() {
      if (this.currentNode && this.currentNode instanceof XMLDocType) {
        return this.attList.apply(this, arguments);
      } else {
        return this.attribute.apply(this, arguments);
      }
    };

    XMLDocumentCB.prototype.ent = function(name, value) {
      return this.entity(name, value);
    };

    XMLDocumentCB.prototype.pent = function(name, value) {
      return this.pEntity(name, value);
    };

    XMLDocumentCB.prototype.not = function(name, value) {
      return this.notation(name, value);
    };

    return XMLDocumentCB;

  })();

}).call(this);


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.6
(function() {
  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStreamWriter, XMLText, XMLWriterBase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLDeclaration = __webpack_require__(29);

  XMLDocType = __webpack_require__(30);

  XMLCData = __webpack_require__(27);

  XMLComment = __webpack_require__(28);

  XMLElement = __webpack_require__(26);

  XMLRaw = __webpack_require__(35);

  XMLText = __webpack_require__(36);

  XMLProcessingInstruction = __webpack_require__(37);

  XMLDTDAttList = __webpack_require__(31);

  XMLDTDElement = __webpack_require__(33);

  XMLDTDEntity = __webpack_require__(32);

  XMLDTDNotation = __webpack_require__(34);

  XMLWriterBase = __webpack_require__(82);

  module.exports = XMLStreamWriter = (function(superClass) {
    extend(XMLStreamWriter, superClass);

    function XMLStreamWriter(stream, options) {
      this.stream = stream;
      XMLStreamWriter.__super__.constructor.call(this, options);
    }

    XMLStreamWriter.prototype.document = function(doc) {
      var child, i, j, len, len1, ref, ref1, results;
      ref = doc.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        child.isLastRootNode = false;
      }
      doc.children[doc.children.length - 1].isLastRootNode = true;
      ref1 = doc.children;
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        child = ref1[j];
        switch (false) {
          case !(child instanceof XMLDeclaration):
            results.push(this.declaration(child));
            break;
          case !(child instanceof XMLDocType):
            results.push(this.docType(child));
            break;
          case !(child instanceof XMLComment):
            results.push(this.comment(child));
            break;
          case !(child instanceof XMLProcessingInstruction):
            results.push(this.processingInstruction(child));
            break;
          default:
            results.push(this.element(child));
        }
      }
      return results;
    };

    XMLStreamWriter.prototype.attribute = function(att) {
      return this.stream.write(' ' + att.name + '="' + att.value + '"');
    };

    XMLStreamWriter.prototype.cdata = function(node, level) {
      return this.stream.write(this.space(level) + '<![CDATA[' + node.text + ']]>' + this.endline(node));
    };

    XMLStreamWriter.prototype.comment = function(node, level) {
      return this.stream.write(this.space(level) + '<!-- ' + node.text + ' -->' + this.endline(node));
    };

    XMLStreamWriter.prototype.declaration = function(node, level) {
      this.stream.write(this.space(level));
      this.stream.write('<?xml version="' + node.version + '"');
      if (node.encoding != null) {
        this.stream.write(' encoding="' + node.encoding + '"');
      }
      if (node.standalone != null) {
        this.stream.write(' standalone="' + node.standalone + '"');
      }
      this.stream.write(this.spacebeforeslash + '?>');
      return this.stream.write(this.endline(node));
    };

    XMLStreamWriter.prototype.docType = function(node, level) {
      var child, i, len, ref;
      level || (level = 0);
      this.stream.write(this.space(level));
      this.stream.write('<!DOCTYPE ' + node.root().name);
      if (node.pubID && node.sysID) {
        this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
      } else if (node.sysID) {
        this.stream.write(' SYSTEM "' + node.sysID + '"');
      }
      if (node.children.length > 0) {
        this.stream.write(' [');
        this.stream.write(this.endline(node));
        ref = node.children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          switch (false) {
            case !(child instanceof XMLDTDAttList):
              this.dtdAttList(child, level + 1);
              break;
            case !(child instanceof XMLDTDElement):
              this.dtdElement(child, level + 1);
              break;
            case !(child instanceof XMLDTDEntity):
              this.dtdEntity(child, level + 1);
              break;
            case !(child instanceof XMLDTDNotation):
              this.dtdNotation(child, level + 1);
              break;
            case !(child instanceof XMLCData):
              this.cdata(child, level + 1);
              break;
            case !(child instanceof XMLComment):
              this.comment(child, level + 1);
              break;
            case !(child instanceof XMLProcessingInstruction):
              this.processingInstruction(child, level + 1);
              break;
            default:
              throw new Error("Unknown DTD node type: " + child.constructor.name);
          }
        }
        this.stream.write(']');
      }
      this.stream.write(this.spacebeforeslash + '>');
      return this.stream.write(this.endline(node));
    };

    XMLStreamWriter.prototype.element = function(node, level) {
      var att, child, i, len, name, ref, ref1, space;
      level || (level = 0);
      space = this.space(level);
      this.stream.write(space + '<' + node.name);
      ref = node.attributes;
      for (name in ref) {
        if (!hasProp.call(ref, name)) continue;
        att = ref[name];
        this.attribute(att);
      }
      if (node.children.length === 0 || node.children.every(function(e) {
        return e.value === '';
      })) {
        if (this.allowEmpty) {
          this.stream.write('></' + node.name + '>');
        } else {
          this.stream.write(this.spacebeforeslash + '/>');
        }
      } else if (this.pretty && node.children.length === 1 && (node.children[0].value != null)) {
        this.stream.write('>');
        this.stream.write(node.children[0].value);
        this.stream.write('</' + node.name + '>');
      } else {
        this.stream.write('>' + this.newline);
        ref1 = node.children;
        for (i = 0, len = ref1.length; i < len; i++) {
          child = ref1[i];
          switch (false) {
            case !(child instanceof XMLCData):
              this.cdata(child, level + 1);
              break;
            case !(child instanceof XMLComment):
              this.comment(child, level + 1);
              break;
            case !(child instanceof XMLElement):
              this.element(child, level + 1);
              break;
            case !(child instanceof XMLRaw):
              this.raw(child, level + 1);
              break;
            case !(child instanceof XMLText):
              this.text(child, level + 1);
              break;
            case !(child instanceof XMLProcessingInstruction):
              this.processingInstruction(child, level + 1);
              break;
            default:
              throw new Error("Unknown XML node type: " + child.constructor.name);
          }
        }
        this.stream.write(space + '</' + node.name + '>');
      }
      return this.stream.write(this.endline(node));
    };

    XMLStreamWriter.prototype.processingInstruction = function(node, level) {
      this.stream.write(this.space(level) + '<?' + node.target);
      if (node.value) {
        this.stream.write(' ' + node.value);
      }
      return this.stream.write(this.spacebeforeslash + '?>' + this.endline(node));
    };

    XMLStreamWriter.prototype.raw = function(node, level) {
      return this.stream.write(this.space(level) + node.value + this.endline(node));
    };

    XMLStreamWriter.prototype.text = function(node, level) {
      return this.stream.write(this.space(level) + node.value + this.endline(node));
    };

    XMLStreamWriter.prototype.dtdAttList = function(node, level) {
      this.stream.write(this.space(level) + '<!ATTLIST ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType);
      if (node.defaultValueType !== '#DEFAULT') {
        this.stream.write(' ' + node.defaultValueType);
      }
      if (node.defaultValue) {
        this.stream.write(' "' + node.defaultValue + '"');
      }
      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));
    };

    XMLStreamWriter.prototype.dtdElement = function(node, level) {
      this.stream.write(this.space(level) + '<!ELEMENT ' + node.name + ' ' + node.value);
      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));
    };

    XMLStreamWriter.prototype.dtdEntity = function(node, level) {
      this.stream.write(this.space(level) + '<!ENTITY');
      if (node.pe) {
        this.stream.write(' %');
      }
      this.stream.write(' ' + node.name);
      if (node.value) {
        this.stream.write(' "' + node.value + '"');
      } else {
        if (node.pubID && node.sysID) {
          this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
        } else if (node.sysID) {
          this.stream.write(' SYSTEM "' + node.sysID + '"');
        }
        if (node.nData) {
          this.stream.write(' NDATA ' + node.nData);
        }
      }
      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));
    };

    XMLStreamWriter.prototype.dtdNotation = function(node, level) {
      this.stream.write(this.space(level) + '<!NOTATION ' + node.name);
      if (node.pubID && node.sysID) {
        this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
      } else if (node.pubID) {
        this.stream.write(' PUBLIC "' + node.pubID + '"');
      } else if (node.sysID) {
        this.stream.write(' SYSTEM "' + node.sysID + '"');
      }
      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));
    };

    XMLStreamWriter.prototype.endline = function(node) {
      if (!node.isLastRootNode) {
        return this.newline;
      } else {
        return '';
      }
    };

    return XMLStreamWriter;

  })(XMLWriterBase);

}).call(this);


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(7);

var _assign2 = _interopRequireDefault(_assign);

var _map = __webpack_require__(9);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(5);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var Request_1 = __webpack_require__(10);

var Data = function () {
    function Data(connection, xmlmc) {
        (0, _classCallCheck3.default)(this, Data);

        this.connection = connection;
        this.xmlmc = xmlmc;
        this.service = 'data';
        this.paramMap = new _map2.default([['addRecord', ['table', 'returnModifiedData']], ['deleteRecord', ['table', 'keyValue']], ['getColumnInfoList', ['database', 'table']], ['getRecord', ['database', 'table', 'keyValue', 'formatValues', 'returnMeta', 'returnRawValues']], ['getStoredQueryList', ['folder']], ['getTableInfoList', ['database']], ['invokeStoredQuery', ['storedQuery', 'parameters']], ['runDataImport', ['confFileName', 'dataFileName']], ['sqlQuery', ['database', 'query', 'rowOffset', 'rowCount', 'formatValues', 'returnMeta', 'maxResults', 'returnRawValues']], ['updateRecord', ['table', 'returnModifiedData']]]);
    }

    (0, _createClass3.default)(Data, [{
        key: "addRecord",
        value: function addRecord(table, optionalParams) {
            var request = new Request_1.Request(this.service, 'addRecord', (0, _assign2.default)({}, { table: table }, optionalParams || {}), this.paramMap.get('addRecord') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "deleteRecord",
        value: function deleteRecord(table, keyValue, optionalParams) {
            var request = new Request_1.Request(this.service, 'deleteRecord', (0, _assign2.default)({}, {
                table: table,
                keyValue: keyValue
            }, optionalParams || {}), this.paramMap.get('deleteRecord') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getColumnInfoList",
        value: function getColumnInfoList(database, table, optionalParams) {
            var request = new Request_1.Request(this.service, 'getColumnInfoList', (0, _assign2.default)({}, {
                database: database,
                table: table
            }, optionalParams || {}), this.paramMap.get('getColumnInfoList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getRecord",
        value: function getRecord(table, keyValue, optionalParams) {
            var request = new Request_1.Request(this.service, 'getRecord', (0, _assign2.default)({}, {
                table: table,
                keyValue: keyValue
            }, optionalParams || {}), this.paramMap.get('getRecord') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getStoredQueryList",
        value: function getStoredQueryList(optionalParams) {
            var request = new Request_1.Request(this.service, 'getStoredQueryList', optionalParams || {}, this.paramMap.get('getStoredQueryList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getTableInfoList",
        value: function getTableInfoList(database, optionalParams) {
            var request = new Request_1.Request(this.service, 'getTableInfoList', (0, _assign2.default)({}, { database: database }, optionalParams || {}), this.paramMap.get('getTableInfoList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "invokeStoredQuery",
        value: function invokeStoredQuery(storedQuery, optionalParams) {
            var request = new Request_1.Request(this.service, 'invokeStoredQuery', (0, _assign2.default)({}, { storedQuery: storedQuery }, optionalParams || {}), this.paramMap.get('invokeStoredQuery') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "runDataImport",
        value: function runDataImport(confFileName, dataFileName, optionalParams) {
            var request = new Request_1.Request(this.service, 'runDataImport', (0, _assign2.default)({}, {
                confFileName: confFileName,
                dataFileName: dataFileName
            }, optionalParams || {}), this.paramMap.get('runDataImport') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "sqlQuery",
        value: function sqlQuery(database, query, optionalParams) {
            var request = new Request_1.Request(this.service, 'sqlQuery', (0, _assign2.default)({}, {
                database: database,
                query: query
            }, optionalParams || {}), this.paramMap.get('sqlQuery') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "updateRecord",
        value: function updateRecord(table, optionalParams) {
            var request = new Request_1.Request(this.service, 'updateRecord', (0, _assign2.default)({}, { table: table }, optionalParams || {}), this.paramMap.get('updateRecord') || []);
            return this.connection.sendRequest(request);
        }
    }]);
    return Data;
}();

exports.Data = Data;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(7);

var _assign2 = _interopRequireDefault(_assign);

var _map = __webpack_require__(9);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(5);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var Request_1 = __webpack_require__(10);

var Admin = function () {
    function Admin(connection, xmlmc) {
        (0, _classCallCheck3.default)(this, Admin);

        this.connection = connection;
        this.xmlmc = xmlmc;
        this.service = 'admin';
        this.paramMap = new _map2.default([['addEmailRoutingRule', ['condition', 'mode', 'mailbox', 'folder']], ['deleteEmailRoutingRule', ['condition', 'mode', 'mailbox', 'folder']], ['getAuthentication', ['userId']], ['getServerConfiguration', ['EMailRoutingRules']], ['lockAnalyst', ['userId']], ['setAuthentication', ['userId', 'authenticationType', 'authenticationString']], ['unlockAnalyst', ['userId']]]);
    }

    (0, _createClass3.default)(Admin, [{
        key: "addEmailRoutingRule",
        value: function addEmailRoutingRule(condition, optionalParams) {
            var request = new Request_1.Request(this.service, 'addEmailRoutingRule', (0, _assign2.default)({}, { condition: condition }, optionalParams || {}), this.paramMap.get('addEmailRoutingRule') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "deleteEmailRoutingRule",
        value: function deleteEmailRoutingRule(condition, optionalParams) {
            var request = new Request_1.Request(this.service, 'deleteEmailRoutingRule', (0, _assign2.default)({}, { condition: condition }, optionalParams || {}), this.paramMap.get('deleteEmailRoutingRule') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getAuthentication",
        value: function getAuthentication(userId, optionalParams) {
            var request = new Request_1.Request(this.service, 'getAuthentication', (0, _assign2.default)({}, { userId: userId }, optionalParams || {}), this.paramMap.get('getAuthentication') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getServerConfiguration",
        value: function getServerConfiguration(optionalParams) {
            var request = new Request_1.Request(this.service, 'getServerConfiguration', optionalParams || {}, this.paramMap.get('getServerConfiguration') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "lockAnalyst",
        value: function lockAnalyst(userId, optionalParams) {
            var request = new Request_1.Request(this.service, 'lockAnalyst', (0, _assign2.default)({}, { userId: userId }, optionalParams || {}), this.paramMap.get('lockAnalyst') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "setAuthentication",
        value: function setAuthentication(userId, authenticationString, optionalParams) {
            var request = new Request_1.Request(this.service, 'setAuthentication', (0, _assign2.default)({}, {
                userId: userId,
                authenticationString: authenticationString
            }, optionalParams || {}), this.paramMap.get('setAuthentication') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "unlockAnalyst",
        value: function unlockAnalyst(userId, optionalParams) {
            var request = new Request_1.Request(this.service, 'unlockAnalyst', (0, _assign2.default)({}, { userId: userId }, optionalParams || {}), this.paramMap.get('unlockAnalyst') || []);
            return this.connection.sendRequest(request);
        }
    }]);
    return Admin;
}();

exports.Admin = Admin;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(7);

var _assign2 = _interopRequireDefault(_assign);

var _map = __webpack_require__(9);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(5);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var Request_1 = __webpack_require__(10);

var Helpdesk = function () {
    function Helpdesk(connection, xmlmc) {
        (0, _classCallCheck3.default)(this, Helpdesk);

        this.connection = connection;
        this.xmlmc = xmlmc;
        this.service = 'helpdesk';
        this.paramMap = new _map2.default([['acceptCalls', ['callref', 'markAsSLAResponse', 'timeOfAction']], ['addCallWorkItem', ['callref', 'parentGroup', 'description', 'time', 'assignToGroup', 'assignToAnalyst', 'actionBy', 'priority', 'type', 'reminder', 'remindAssignee', 'remindCallOwner', 'notifyGroup']], ['addCallWorkList', ['WorkListName', 'callref', 'SequentialWorkList', 'CreateMode', 'CreateFromTemplate', 'WorkItem']], ['addCallsToIssue', ['issueRef', 'callref']], ['addCustomerToIssue', ['issueRef', 'keyValue']], ['addFilesToCallDiaryItem', ['callRef', 'diaryUpdateId', 'fileAttachment', 'serverFileAttachment']], ['assignAndHoldCallsto3rdParty', ['callref', 'assignThirdPartySupplier', 'assignThirdPartyContract', 'holdUntil', 'updateMessage', 'forceAssignment']], ['assignCalls', ['callref', 'groupId', 'analystId', 'tpmContract', 'forceAssignment']], ['attachFilesToCalls', ['callRef', 'fileAttachment', 'serverFileAttachment']], ['attachMessageToCall', ['mailbox', 'messageId', 'fileName', 'callRef', 'udIndex', 'attachType', 'includeAttachments', 'moveMessageToFolderId']], ['callKeywordQuery', ['columnList', 'queryString', 'queryType', 'logStart', 'logEnd', 'resolveStart', 'resolveEnd', 'status', 'filter', 'maxResults']], ['callNaturalQuery', ['columnList', 'queryString', 'logStart', 'logEnd', 'resolveStart', 'resolveEnd', 'status', 'filter', 'maxResults']], ['cancelCalls', ['callRef', 'description', 'publicUpdate', 'extraUpdateDbValues']], ['changeCallClass', ['callref', 'class']], ['changeCallCondition', ['callref', 'condition']], ['changeCallProblemProfile', ['callref', 'code']], ['closeCalls', ['callref', 'timeSpent', 'description', 'fixCode', 'isChargeable', 'timeOfAction', 'publicUpdate', 'updateSource', 'updateCode', 'delayCacheFlush', 'fileAttachment', 'serverFileAttachment', 'extraUpdateDbValues']], ['completeCallWorkItem', ['callref', 'workItemId']], ['deleteAttachmentFromCall', ['callRef', 'attachId']], ['deleteCallWorkItems', ['callref', 'workItemId']], ['getAnalystAssignedCallCount', ['analystId', 'groupId']], ['getAnalystAssignmentTree', ['groupId', 'recursive']], ['getAnalystTeamTree', ['groupId', 'recursive']], ['getCallDiaryItemList', ['callref']], ['getCallFileAttachment', ['callRef', 'fileId']], ['getCallFileAttachmentList', ['callRef', 'updateId']], ['getCallSLAInfo', ['callref']], ['getCallStatusInfo', ['callref']], ['getCallSummaryInfo', ['callref']], ['getCallTotalTimeSpent', ['callref']], ['getCallWorkItem', ['callref', 'workItemId']], ['getCallWorkItemCount', ['callref']], ['getCallWorkItems', ['callref']], ['getLastCallUpdateIndex', ['callref']], ['getMyWorkItemList', ['configName', 'includeInactiveTasks', 'includeCompletedTasks']], ['getProfileCodeTree', ['node', 'filter', 'returnFullTree', 'returnInactiveCodes']], ['getResolutionCodeTree', ['node', 'filter', 'returnFullTree', 'returnInactiveCodes']], ['getTemplateWorkItems', ['templateName', 'parentGroup', 'workItemId']], ['getThirdPartySlaInfoForCall', ['callref', 'contractId']], ['holdCalls', ['callref', 'timeSpent', 'description', 'holdUntil', 'publicUpdate', 'updateSource', 'updateCode', 'fileAttachment', 'serverFileAttachment', 'extraUpdateDbValues']], ['issueClose', ['issueRef']], ['issueCreate', ['publicFlag', 'issueType', 'summary', 'description', 'createTime', 'resolveBy', 'masterCallref', 'callref', 'additionalValues']], ['issueResolve', ['issueRef']], ['issueUpdate', ['issueRef', 'publicFlag', 'issueType', 'summary', 'description', 'resolveBy', 'masterCallref', 'callref', 'additionalValues']], ['lockCalls', ['callref', 'reason', 'ignoreStatus']], ['logAndAcceptNewCall', ['incomingCallref', 'callClass', 'slaName', 'customerId', 'customerName', 'assetId', 'costCenter', 'probCode', 'site', 'condition', 'logDate', 'timeSpent', 'updateMessage', 'updateCode', 'updateSource', 'fileAttachment', 'serverFileAttachment', 'additionalCallValues']], ['logAndAssignNewCall', ['incomingCallref', 'callClass', 'slaName', 'customerId', 'customerName', 'assetId', 'costCenter', 'probCode', 'site', 'condition', 'logDate', 'groupId', 'analystId', 'timeSpent', 'updateMessage', 'updateCode', 'updateSource', 'forceAssignment', 'fileAttachment', 'serverFileAttachment', 'additionalCallValues']], ['logAndTakeNewCall', ['incomingCallref', 'callClass', 'slaName', 'customerId', 'customerName', 'assetId', 'costCenter', 'probCode', 'site', 'condition', 'logDate', 'timeSpent', 'updateMessage', 'updateCode', 'updateSource', 'fileAttachment', 'serverFileAttachment', 'additionalCallValues']], ['logDeferredCall', ['callClass', 'slaName', 'customerId', 'customerName', 'assetId', 'costCenter', 'probCode', 'site', 'condition', 'logDate', 'groupId', 'analystId', 'timeSpent', 'updateMessage', 'updateCode', 'updateSource', 'forceAssignment', 'fileAttachment', 'serverFileAttachment', 'additionalCallValues']], ['logNewCall', ['incomingCallref', 'callClass', 'slaName', 'customerId', 'customerName', 'assetId', 'costCenter', 'probCode', 'site', 'condition', 'logDate', 'timeSpent', 'updateMessage', 'updateCode', 'updateSource', 'fileAttachment', 'serverFileAttachment', 'additionalCallValues']], ['markWatchedCallsUnread', ['callref']], ['quicklogCallAdd', ['name', 'formName', 'callClass', 'mailbox', 'quickLogKeyValues', 'workItemList', 'fileAttachment']], ['quicklogCallDelete', ['name', 'mailbox']], ['quicklogCallGet', ['name', 'mailbox']], ['quicklogCallGetList', ['mailbox', 'formName', 'callClass']], ['quicklogCallUpdate', ['name', 'formName', 'callClass', 'mailbox', 'quickLogKeyValues', 'workItemList', 'fileAttachment']], ['reactivateCalls', ['callref', 'restoreWorkflow']], ['removeCallsFromIssue', ['issueRef', 'callref']], ['removeWatchOptions', ['callref', 'options']], ['resolveCalls', ['callref', 'timeSpent', 'description', 'fixCode', 'timeOfAction', 'publicUpdate', 'updateSource', 'updateCode', 'fileAttachment', 'serverFileAttachment', 'extraUpdateDbValues']], ['setWatchOptions', ['callref', 'options']], ['takeCallsOffHold', ['callref']], ['unlockCalls', ['callref']], ['unwatchCalls', ['callref']], ['updateAndAcceptCalls', ['callref', 'timeSpent', 'description', 'publicUpdate', 'timeOfAction', 'updateSource', 'updateCode', 'markAsSLAResponse', 'priority', 'targetFixTime', 'fileAttachment', 'serverFileAttachment', 'extraUpdateDbValues']], ['updateAndAssignCallTo3rdParty', ['callref', 'timeSpent', 'description', 'publicUpdate', 'timeOfAction', 'updateSource', 'updateCode', 'assignThirdPartySupplier', 'assignThirdPartyContract', 'forceAssignment', 'fileAttachment', 'serverFileAttachment', 'extraUpdateDbValues']], ['updateAndAssignCalls', ['callref', 'timeSpent', 'description', 'publicUpdate', 'timeOfAction', 'updateSource', 'updateCode', 'assignGroup', 'assignAnalyst', 'forceAssignment', 'markAsSLAResponse', 'priority', 'targetFixTime', 'fileAttachment', 'serverFileAttachment', 'extraUpdateDbValues']], ['updateCallDiaryItem', ['callref', 'updateIndex', 'updateSource', 'updateAction', 'publicUpdate', 'emailSent', 'emailReceived', 'updateText', 'extraUpdateDbValues']], ['updateCallFileAttachment', ['callRef', 'fileId', 'fileAttachment']], ['updateCallValues', ['callref', 'actionVerb', 'updateMessage', 'additionalCallValues']], ['updateCallWorkItem', ['callref', 'workItemId', 'description', 'time', 'assignToGroup', 'assignToAnalyst', 'actionBy', 'priority', 'type', 'status', 'progress', 'reminder', 'remindAssignee', 'remindCallOwner', 'notifyGroup']], ['updateCalls', ['callref', 'timeSpent', 'description', 'publicUpdate', 'timeOfAction', 'updateSource', 'updateCode', 'markAsSLAResponse', 'priority', 'targetFixTime', 'fileAttachment', 'serverFileAttachment', 'extraUpdateDbValues']], ['watchCalls', ['callref']]]);
    }

    (0, _createClass3.default)(Helpdesk, [{
        key: "acceptCalls",
        value: function acceptCalls(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'acceptCalls', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('acceptCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "addCallWorkItem",
        value: function addCallWorkItem(callref, parentGroup, description, time, assignToGroup, actionBy, priority, type, optionalParams) {
            var request = new Request_1.Request(this.service, 'addCallWorkItem', (0, _assign2.default)({}, {
                callref: callref,
                parentGroup: parentGroup,
                description: description,
                time: time,
                assignToGroup: assignToGroup,
                actionBy: actionBy,
                priority: priority,
                type: type
            }, optionalParams || {}), this.paramMap.get('addCallWorkItem') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "addCallWorkList",
        value: function addCallWorkList(WorkListName, callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'addCallWorkList', (0, _assign2.default)({}, {
                WorkListName: WorkListName,
                callref: callref
            }, optionalParams || {}), this.paramMap.get('addCallWorkList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "addCallsToIssue",
        value: function addCallsToIssue(issueRef, callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'addCallsToIssue', (0, _assign2.default)({}, {
                issueRef: issueRef,
                callref: callref
            }, optionalParams || {}), this.paramMap.get('addCallsToIssue') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "addCustomerToIssue",
        value: function addCustomerToIssue(issueRef, keyValue, optionalParams) {
            var request = new Request_1.Request(this.service, 'addCustomerToIssue', (0, _assign2.default)({}, {
                issueRef: issueRef,
                keyValue: keyValue
            }, optionalParams || {}), this.paramMap.get('addCustomerToIssue') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "addFilesToCallDiaryItem",
        value: function addFilesToCallDiaryItem(callRef, diaryUpdateId, optionalParams) {
            var request = new Request_1.Request(this.service, 'addFilesToCallDiaryItem', (0, _assign2.default)({}, {
                callRef: callRef,
                diaryUpdateId: diaryUpdateId
            }, optionalParams || {}), this.paramMap.get('addFilesToCallDiaryItem') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "assignAndHoldCallsto3rdParty",
        value: function assignAndHoldCallsto3rdParty(callref, assignThirdPartySupplier, assignThirdPartyContract, holdUntil, updateMessage, optionalParams) {
            var request = new Request_1.Request(this.service, 'assignAndHoldCallsto3rdParty', (0, _assign2.default)({}, {
                callref: callref,
                assignThirdPartySupplier: assignThirdPartySupplier,
                assignThirdPartyContract: assignThirdPartyContract,
                holdUntil: holdUntil,
                updateMessage: updateMessage
            }, optionalParams || {}), this.paramMap.get('assignAndHoldCallsto3rdParty') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "assignCalls",
        value: function assignCalls(callref, groupId, optionalParams) {
            var request = new Request_1.Request(this.service, 'assignCalls', (0, _assign2.default)({}, {
                callref: callref,
                groupId: groupId
            }, optionalParams || {}), this.paramMap.get('assignCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "attachFilesToCalls",
        value: function attachFilesToCalls(callRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'attachFilesToCalls', (0, _assign2.default)({}, { callRef: callRef }, optionalParams || {}), this.paramMap.get('attachFilesToCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "attachMessageToCall",
        value: function attachMessageToCall(mailbox, messageId, fileName, callRef, udIndex, attachType, includeAttachments, optionalParams) {
            var request = new Request_1.Request(this.service, 'attachMessageToCall', (0, _assign2.default)({}, {
                mailbox: mailbox,
                messageId: messageId,
                fileName: fileName,
                callRef: callRef,
                udIndex: udIndex,
                attachType: attachType,
                includeAttachments: includeAttachments
            }, optionalParams || {}), this.paramMap.get('attachMessageToCall') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "callKeywordQuery",
        value: function callKeywordQuery(columnList, queryString, queryType, optionalParams) {
            var request = new Request_1.Request(this.service, 'callKeywordQuery', (0, _assign2.default)({}, {
                columnList: columnList,
                queryString: queryString,
                queryType: queryType
            }, optionalParams || {}), this.paramMap.get('callKeywordQuery') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "callNaturalQuery",
        value: function callNaturalQuery(columnList, queryString, optionalParams) {
            var request = new Request_1.Request(this.service, 'callNaturalQuery', (0, _assign2.default)({}, {
                columnList: columnList,
                queryString: queryString
            }, optionalParams || {}), this.paramMap.get('callNaturalQuery') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "cancelCalls",
        value: function cancelCalls(callRef, description, optionalParams) {
            var request = new Request_1.Request(this.service, 'cancelCalls', (0, _assign2.default)({}, {
                callRef: callRef,
                description: description
            }, optionalParams || {}), this.paramMap.get('cancelCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "changeCallClass",
        value: function changeCallClass(callref, callClass, optionalParams) {
            var request = new Request_1.Request(this.service, 'changeCallClass', (0, _assign2.default)({}, {
                callref: callref,
                'class': callClass
            }, optionalParams || {}), this.paramMap.get('changeCallClass') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "changeCallCondition",
        value: function changeCallCondition(callref, condition, optionalParams) {
            var request = new Request_1.Request(this.service, 'changeCallCondition', (0, _assign2.default)({}, {
                callref: callref,
                condition: condition
            }, optionalParams || {}), this.paramMap.get('changeCallCondition') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "changeCallProblemProfile",
        value: function changeCallProblemProfile(callref, code, optionalParams) {
            var request = new Request_1.Request(this.service, 'changeCallProblemProfile', (0, _assign2.default)({}, {
                callref: callref,
                code: code
            }, optionalParams || {}), this.paramMap.get('changeCallProblemProfile') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "closeCalls",
        value: function closeCalls(callref, timeSpent, description, optionalParams) {
            var request = new Request_1.Request(this.service, 'closeCalls', (0, _assign2.default)({}, {
                callref: callref,
                timeSpent: timeSpent,
                description: description
            }, optionalParams || {}), this.paramMap.get('closeCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "completeCallWorkItem",
        value: function completeCallWorkItem(callref, workItemId, optionalParams) {
            var request = new Request_1.Request(this.service, 'completeCallWorkItem', (0, _assign2.default)({}, {
                callref: callref,
                workItemId: workItemId
            }, optionalParams || {}), this.paramMap.get('completeCallWorkItem') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "deleteAttachmentFromCall",
        value: function deleteAttachmentFromCall(callRef, attachId, optionalParams) {
            var request = new Request_1.Request(this.service, 'deleteAttachmentFromCall', (0, _assign2.default)({}, {
                callRef: callRef,
                attachId: attachId
            }, optionalParams || {}), this.paramMap.get('deleteAttachmentFromCall') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "deleteCallWorkItems",
        value: function deleteCallWorkItems(callref, workItemId, optionalParams) {
            var request = new Request_1.Request(this.service, 'deleteCallWorkItems', (0, _assign2.default)({}, {
                callref: callref,
                workItemId: workItemId
            }, optionalParams || {}), this.paramMap.get('deleteCallWorkItems') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getAnalystAssignedCallCount",
        value: function getAnalystAssignedCallCount(analystId, groupId, optionalParams) {
            var request = new Request_1.Request(this.service, 'getAnalystAssignedCallCount', (0, _assign2.default)({}, {
                analystId: analystId,
                groupId: groupId
            }, optionalParams || {}), this.paramMap.get('getAnalystAssignedCallCount') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getAnalystAssignmentTree",
        value: function getAnalystAssignmentTree(optionalParams) {
            var request = new Request_1.Request(this.service, 'getAnalystAssignmentTree', optionalParams || {}, this.paramMap.get('getAnalystAssignmentTree') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getAnalystTeamTree",
        value: function getAnalystTeamTree(optionalParams) {
            var request = new Request_1.Request(this.service, 'getAnalystTeamTree', optionalParams || {}, this.paramMap.get('getAnalystTeamTree') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getCallDiaryItemList",
        value: function getCallDiaryItemList(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'getCallDiaryItemList', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('getCallDiaryItemList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getCallFileAttachment",
        value: function getCallFileAttachment(callRef, fileId, optionalParams) {
            var request = new Request_1.Request(this.service, 'getCallFileAttachment', (0, _assign2.default)({}, {
                callRef: callRef,
                fileId: fileId
            }, optionalParams || {}), this.paramMap.get('getCallFileAttachment') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getCallFileAttachmentList",
        value: function getCallFileAttachmentList(callRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'getCallFileAttachmentList', (0, _assign2.default)({}, { callRef: callRef }, optionalParams || {}), this.paramMap.get('getCallFileAttachmentList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getCallSLAInfo",
        value: function getCallSLAInfo(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'getCallSLAInfo', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('getCallSLAInfo') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getCallStatusInfo",
        value: function getCallStatusInfo(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'getCallStatusInfo', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('getCallStatusInfo') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getCallSummaryInfo",
        value: function getCallSummaryInfo(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'getCallSummaryInfo', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('getCallSummaryInfo') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getCallTotalTimeSpent",
        value: function getCallTotalTimeSpent(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'getCallTotalTimeSpent', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('getCallTotalTimeSpent') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getCallWorkItem",
        value: function getCallWorkItem(callref, workItemId, optionalParams) {
            var request = new Request_1.Request(this.service, 'getCallWorkItem', (0, _assign2.default)({}, {
                callref: callref,
                workItemId: workItemId
            }, optionalParams || {}), this.paramMap.get('getCallWorkItem') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getCallWorkItemCount",
        value: function getCallWorkItemCount(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'getCallWorkItemCount', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('getCallWorkItemCount') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getCallWorkItems",
        value: function getCallWorkItems(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'getCallWorkItems', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('getCallWorkItems') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getLastCallUpdateIndex",
        value: function getLastCallUpdateIndex(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'getLastCallUpdateIndex', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('getLastCallUpdateIndex') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getMyWorkItemList",
        value: function getMyWorkItemList(optionalParams) {
            var request = new Request_1.Request(this.service, 'getMyWorkItemList', optionalParams || {}, this.paramMap.get('getMyWorkItemList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getProfileCodeTree",
        value: function getProfileCodeTree(optionalParams) {
            var request = new Request_1.Request(this.service, 'getProfileCodeTree', optionalParams || {}, this.paramMap.get('getProfileCodeTree') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getResolutionCodeTree",
        value: function getResolutionCodeTree(optionalParams) {
            var request = new Request_1.Request(this.service, 'getResolutionCodeTree', optionalParams || {}, this.paramMap.get('getResolutionCodeTree') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getTemplateWorkItems",
        value: function getTemplateWorkItems(templateName, optionalParams) {
            var request = new Request_1.Request(this.service, 'getTemplateWorkItems', (0, _assign2.default)({}, { templateName: templateName }, optionalParams || {}), this.paramMap.get('getTemplateWorkItems') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getThirdPartyAssignmentTree",
        value: function getThirdPartyAssignmentTree(optionalParams) {
            var request = new Request_1.Request(this.service, 'getThirdPartyAssignmentTree', optionalParams || {}, this.paramMap.get('getThirdPartyAssignmentTree') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getThirdPartySlaInfoForCall",
        value: function getThirdPartySlaInfoForCall(callref, contractId, optionalParams) {
            var request = new Request_1.Request(this.service, 'getThirdPartySlaInfoForCall', (0, _assign2.default)({}, {
                callref: callref,
                contractId: contractId
            }, optionalParams || {}), this.paramMap.get('getThirdPartySlaInfoForCall') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getThirdPartyTeamTree",
        value: function getThirdPartyTeamTree(optionalParams) {
            var request = new Request_1.Request(this.service, 'getThirdPartyTeamTree', optionalParams || {}, this.paramMap.get('getThirdPartyTeamTree') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getWorkflowTemplateNameList",
        value: function getWorkflowTemplateNameList(optionalParams) {
            var request = new Request_1.Request(this.service, 'getWorkflowTemplateNameList', optionalParams || {}, this.paramMap.get('getWorkflowTemplateNameList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "holdCalls",
        value: function holdCalls(callref, timeSpent, description, holdUntil, optionalParams) {
            var request = new Request_1.Request(this.service, 'holdCalls', (0, _assign2.default)({}, {
                callref: callref,
                timeSpent: timeSpent,
                description: description,
                holdUntil: holdUntil
            }, optionalParams || {}), this.paramMap.get('holdCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "issueClose",
        value: function issueClose(issueRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'issueClose', (0, _assign2.default)({}, { issueRef: issueRef }, optionalParams || {}), this.paramMap.get('issueClose') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "issueCreate",
        value: function issueCreate(issueType, summary, optionalParams) {
            var request = new Request_1.Request(this.service, 'issueCreate', (0, _assign2.default)({}, {
                issueType: issueType,
                summary: summary
            }, optionalParams || {}), this.paramMap.get('issueCreate') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "issueResolve",
        value: function issueResolve(issueRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'issueResolve', (0, _assign2.default)({}, { issueRef: issueRef }, optionalParams || {}), this.paramMap.get('issueResolve') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "issueUpdate",
        value: function issueUpdate(issueRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'issueUpdate', (0, _assign2.default)({}, { issueRef: issueRef }, optionalParams || {}), this.paramMap.get('issueUpdate') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "lockCalls",
        value: function lockCalls(callref, reason, optionalParams) {
            var request = new Request_1.Request(this.service, 'lockCalls', (0, _assign2.default)({}, {
                callref: callref,
                reason: reason
            }, optionalParams || {}), this.paramMap.get('lockCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "logAndAcceptNewCall",
        value: function logAndAcceptNewCall(callClass, optionalParams) {
            var request = new Request_1.Request(this.service, 'logAndAcceptNewCall', (0, _assign2.default)({}, { callClass: callClass }, optionalParams || {}), this.paramMap.get('logAndAcceptNewCall') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "logAndAssignNewCall",
        value: function logAndAssignNewCall(callClass, groupId, optionalParams) {
            var request = new Request_1.Request(this.service, 'logAndAssignNewCall', (0, _assign2.default)({}, {
                callClass: callClass,
                groupId: groupId
            }, optionalParams || {}), this.paramMap.get('logAndAssignNewCall') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "logAndTakeNewCall",
        value: function logAndTakeNewCall(callClass, optionalParams) {
            var request = new Request_1.Request(this.service, 'logAndTakeNewCall', (0, _assign2.default)({}, { callClass: callClass }, optionalParams || {}), this.paramMap.get('logAndTakeNewCall') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "logDeferredCall",
        value: function logDeferredCall(callClass, logDate, groupId, optionalParams) {
            var request = new Request_1.Request(this.service, 'logDeferredCall', (0, _assign2.default)({}, {
                callClass: callClass,
                logDate: logDate,
                groupId: groupId
            }, optionalParams || {}), this.paramMap.get('logDeferredCall') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "logNewCall",
        value: function logNewCall(callClass, optionalParams) {
            var request = new Request_1.Request(this.service, 'logNewCall', (0, _assign2.default)({}, { callClass: callClass }, optionalParams || {}), this.paramMap.get('logNewCall') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "markWatchedCallsUnread",
        value: function markWatchedCallsUnread(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'markWatchedCallsUnread', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('markWatchedCallsUnread') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "quicklogCallAdd",
        value: function quicklogCallAdd(name, formName, callClass, optionalParams) {
            var request = new Request_1.Request(this.service, 'quicklogCallAdd', (0, _assign2.default)({}, {
                name: name,
                formName: formName,
                callClass: callClass
            }, optionalParams || {}), this.paramMap.get('quicklogCallAdd') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "quicklogCallDelete",
        value: function quicklogCallDelete(name, optionalParams) {
            var request = new Request_1.Request(this.service, 'quicklogCallDelete', (0, _assign2.default)({}, { name: name }, optionalParams || {}), this.paramMap.get('quicklogCallDelete') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "quicklogCallGet",
        value: function quicklogCallGet(name, optionalParams) {
            var request = new Request_1.Request(this.service, 'quicklogCallGet', (0, _assign2.default)({}, { name: name }, optionalParams || {}), this.paramMap.get('quicklogCallGet') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "quicklogCallGetList",
        value: function quicklogCallGetList(optionalParams) {
            var request = new Request_1.Request(this.service, 'quicklogCallGetList', optionalParams || {}, this.paramMap.get('quicklogCallGetList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "quicklogCallUpdate",
        value: function quicklogCallUpdate(name, formName, callClass, optionalParams) {
            var request = new Request_1.Request(this.service, 'quicklogCallUpdate', (0, _assign2.default)({}, {
                name: name,
                formName: formName,
                callClass: callClass
            }, optionalParams || {}), this.paramMap.get('quicklogCallUpdate') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "reactivateCalls",
        value: function reactivateCalls(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'reactivateCalls', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('reactivateCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "removeCallsFromIssue",
        value: function removeCallsFromIssue(issueRef, callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'removeCallsFromIssue', (0, _assign2.default)({}, {
                issueRef: issueRef,
                callref: callref
            }, optionalParams || {}), this.paramMap.get('removeCallsFromIssue') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "removeWatchOptions",
        value: function removeWatchOptions(callref, options, optionalParams) {
            var request = new Request_1.Request(this.service, 'removeWatchOptions', (0, _assign2.default)({}, {
                callref: callref,
                options: options
            }, optionalParams || {}), this.paramMap.get('removeWatchOptions') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "resolveCalls",
        value: function resolveCalls(callref, timeSpent, description, optionalParams) {
            var request = new Request_1.Request(this.service, 'resolveCalls', (0, _assign2.default)({}, {
                callref: callref,
                timeSpent: timeSpent,
                description: description
            }, optionalParams || {}), this.paramMap.get('resolveCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "setWatchOptions",
        value: function setWatchOptions(callref, options, optionalParams) {
            var request = new Request_1.Request(this.service, 'setWatchOptions', (0, _assign2.default)({}, {
                callref: callref,
                options: options
            }, optionalParams || {}), this.paramMap.get('setWatchOptions') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "takeCallsOffHold",
        value: function takeCallsOffHold(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'takeCallsOffHold', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('takeCallsOffHold') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "unlockCalls",
        value: function unlockCalls(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'unlockCalls', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('unlockCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "unwatchCalls",
        value: function unwatchCalls(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'unwatchCalls', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('unwatchCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "updateAndAcceptCalls",
        value: function updateAndAcceptCalls(callref, timeSpent, description, optionalParams) {
            var request = new Request_1.Request(this.service, 'updateAndAcceptCalls', (0, _assign2.default)({}, {
                callref: callref,
                timeSpent: timeSpent,
                description: description
            }, optionalParams || {}), this.paramMap.get('updateAndAcceptCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "updateAndAssignCallTo3rdParty",
        value: function updateAndAssignCallTo3rdParty(callref, timeSpent, description, assignThirdPartySupplier, assignThirdPartyContract, optionalParams) {
            var request = new Request_1.Request(this.service, 'updateAndAssignCallTo3rdParty', (0, _assign2.default)({}, {
                callref: callref,
                timeSpent: timeSpent,
                description: description,
                assignThirdPartySupplier: assignThirdPartySupplier,
                assignThirdPartyContract: assignThirdPartyContract
            }, optionalParams || {}), this.paramMap.get('updateAndAssignCallTo3rdParty') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "updateAndAssignCalls",
        value: function updateAndAssignCalls(callref, timeSpent, description, assignGroup, optionalParams) {
            var request = new Request_1.Request(this.service, 'updateAndAssignCalls', (0, _assign2.default)({}, {
                callref: callref,
                timeSpent: timeSpent,
                description: description,
                assignGroup: assignGroup
            }, optionalParams || {}), this.paramMap.get('updateAndAssignCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "updateCallDiaryItem",
        value: function updateCallDiaryItem(callref, updateIndex, optionalParams) {
            var request = new Request_1.Request(this.service, 'updateCallDiaryItem', (0, _assign2.default)({}, {
                callref: callref,
                updateIndex: updateIndex
            }, optionalParams || {}), this.paramMap.get('updateCallDiaryItem') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "updateCallFileAttachment",
        value: function updateCallFileAttachment(callRef, fileId, fileAttachment, optionalParams) {
            var request = new Request_1.Request(this.service, 'updateCallFileAttachment', (0, _assign2.default)({}, {
                callRef: callRef,
                fileId: fileId,
                fileAttachment: fileAttachment
            }, optionalParams || {}), this.paramMap.get('updateCallFileAttachment') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "updateCallValues",
        value: function updateCallValues(callref, additionalCallValues, optionalParams) {
            var request = new Request_1.Request(this.service, 'updateCallValues', (0, _assign2.default)({}, {
                callref: callref,
                additionalCallValues: additionalCallValues
            }, optionalParams || {}), this.paramMap.get('updateCallValues') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "updateCallWorkItem",
        value: function updateCallWorkItem(callref, workItemId, optionalParams) {
            var request = new Request_1.Request(this.service, 'updateCallWorkItem', (0, _assign2.default)({}, {
                callref: callref,
                workItemId: workItemId
            }, optionalParams || {}), this.paramMap.get('updateCallWorkItem') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "updateCalls",
        value: function updateCalls(callref, timeSpent, description, optionalParams) {
            var request = new Request_1.Request(this.service, 'updateCalls', (0, _assign2.default)({}, {
                callref: callref,
                timeSpent: timeSpent,
                description: description
            }, optionalParams || {}), this.paramMap.get('updateCalls') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "watchCalls",
        value: function watchCalls(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'watchCalls', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('watchCalls') || []);
            return this.connection.sendRequest(request);
        }
    }]);
    return Helpdesk;
}();

exports.Helpdesk = Helpdesk;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(7);

var _assign2 = _interopRequireDefault(_assign);

var _map = __webpack_require__(9);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(5);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var Request_1 = __webpack_require__(10);

var Knowledgebase = function () {
    function Knowledgebase(connection, xmlmc) {
        (0, _classCallCheck3.default)(this, Knowledgebase);

        this.connection = connection;
        this.xmlmc = xmlmc;
        this.service = 'knowledgebase';
        this.paramMap = new _map2.default([['articleAdd', ['docRef', 'title', 'docVisibleToCustomers', 'docStatus', 'catalogId', 'problem', 'solution', 'author', 'callref', 'callProbCode', 'docDate', 'keywords', 'template', 'ownerAnalystID', 'ownerGroupID', 'expiryDate', 'isRetired']], ['articleDelete', ['docRef', 'forceDelete']], ['articleUpdate', ['docRef', 'title', 'docVisibleToCustomers', 'docStatus', 'catalogId', 'problem', 'solution', 'author', 'callref', 'callProbCode', 'docDate', 'keywords', 'template', 'ownerAnalystID', 'ownerGroupID', 'expiryDate', 'isRetired']], ['catalogAdd', ['name']], ['catalogDelete', ['catalogId']], ['catalogRename', ['catalogId', 'newName']], ['documentAdd', ['docRef', 'title', 'docVisibleToCustomers', 'docStatus', 'catalogId', 'author', 'callref', 'callProbCode', 'docDate', 'keywords', 'template', 'forceOverwrite', 'document', 'ownerAnalystID', 'ownerGroupID', 'expiryDate', 'isRetired']], ['documentAddChange', ['docRef', 'date', 'analystID', 'groupID', 'description']], ['documentClearChanges', ['docRef']], ['documentDelete', ['docRef', 'forceDelete']], ['documentFlagForModification', ['docRef', 'clearFlag']], ['documentGetCallref', ['docRef']], ['documentGetChanges', ['docRef']], ['documentGetInfo', ['docRef']], ['documentGetRelated', ['docRef']], ['documentGetSurveyAverageUsefulness', ['docRef']], ['documentGetType', ['docRef']], ['documentGetUrl', ['docRef']], ['documentIncreaseAccessCounter', ['docRef', 'counterValue']], ['documentList', ['catalogId', 'maxResults']], ['documentSetRelated', ['docRef', 'relatedDocRef']], ['documentSetSurveyInfo', ['docRef', 'analystID', 'groupID', 'usefulness']], ['documentUpdate', ['docRef', 'title', 'docVisibleToCustomers', 'docStatus', 'catalogId', 'author', 'callref', 'callProbCode', 'docDate', 'keywords', 'template', 'document', 'ownerAnalystID', 'ownerGroupID', 'expiryDate', 'isRetired']], ['doesFileExist', ['fileName']], ['isCallInKnowledgeBase', ['callref']], ['queryKeyword', ['queryString', 'catalogId', 'queryType', 'searchTitle', 'searchKeywords', 'searchProblem', 'searchSolution', 'searchCallProbCode', 'includeRetiredDocuments', 'maxResults', 'sortResultsBy', 'sortResultsAsc']], ['queryNatural', ['queryString', 'catalogId', 'includeRetiredDocuments', 'maxResults', 'sortResultsBy', 'sortResultsAsc']], ['unpublishedCallAdd', ['callRef']], ['unpublishedCallDelete', ['callRef']], ['unpublishedCallList', ['maxResults']]]);
    }

    (0, _createClass3.default)(Knowledgebase, [{
        key: "articleAdd",
        value: function articleAdd(title, docVisibleToCustomers, docStatus, catalogId, optionalParams) {
            var request = new Request_1.Request(this.service, 'articleAdd', (0, _assign2.default)({}, {
                title: title,
                docVisibleToCustomers: docVisibleToCustomers,
                docStatus: docStatus,
                catalogId: catalogId
            }, optionalParams || {}), this.paramMap.get('articleAdd') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "articleDelete",
        value: function articleDelete(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'articleDelete', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('articleDelete') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "articleUpdate",
        value: function articleUpdate(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'articleUpdate', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('articleUpdate') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "catalogAdd",
        value: function catalogAdd(name, optionalParams) {
            var request = new Request_1.Request(this.service, 'catalogAdd', (0, _assign2.default)({}, { name: name }, optionalParams || {}), this.paramMap.get('catalogAdd') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "catalogDelete",
        value: function catalogDelete(catalogId, optionalParams) {
            var request = new Request_1.Request(this.service, 'catalogDelete', (0, _assign2.default)({}, { catalogId: catalogId }, optionalParams || {}), this.paramMap.get('catalogDelete') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "catalogList",
        value: function catalogList(optionalParams) {
            var request = new Request_1.Request(this.service, 'catalogList', optionalParams || {}, this.paramMap.get('catalogList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "catalogRename",
        value: function catalogRename(catalogId, newName, optionalParams) {
            var request = new Request_1.Request(this.service, 'catalogRename', (0, _assign2.default)({}, {
                catalogId: catalogId,
                newName: newName
            }, optionalParams || {}), this.paramMap.get('catalogRename') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentAdd",
        value: function documentAdd(title, docVisibleToCustomers, docStatus, catalogId, document, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentAdd', (0, _assign2.default)({}, {
                title: title,
                docVisibleToCustomers: docVisibleToCustomers,
                docStatus: docStatus,
                catalogId: catalogId,
                document: document
            }, optionalParams || {}), this.paramMap.get('documentAdd') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentAddChange",
        value: function documentAddChange(docRef, date, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentAddChange', (0, _assign2.default)({}, {
                docRef: docRef,
                date: date
            }, optionalParams || {}), this.paramMap.get('documentAddChange') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentClearChanges",
        value: function documentClearChanges(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentClearChanges', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentClearChanges') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentDelete",
        value: function documentDelete(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentDelete', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentDelete') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentFlagForModification",
        value: function documentFlagForModification(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentFlagForModification', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentFlagForModification') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentGetCallref",
        value: function documentGetCallref(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentGetCallref', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentGetCallref') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentGetChanges",
        value: function documentGetChanges(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentGetChanges', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentGetChanges') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentGetInfo",
        value: function documentGetInfo(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentGetInfo', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentGetInfo') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentGetRelated",
        value: function documentGetRelated(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentGetRelated', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentGetRelated') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentGetSurveyAverageUsefulness",
        value: function documentGetSurveyAverageUsefulness(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentGetSurveyAverageUsefulness', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentGetSurveyAverageUsefulness') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentGetType",
        value: function documentGetType(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentGetType', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentGetType') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentGetUrl",
        value: function documentGetUrl(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentGetUrl', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentGetUrl') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentIncreaseAccessCounter",
        value: function documentIncreaseAccessCounter(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentIncreaseAccessCounter', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentIncreaseAccessCounter') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentList",
        value: function documentList(optionalParams) {
            var request = new Request_1.Request(this.service, 'documentList', optionalParams || {}, this.paramMap.get('documentList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentSetRelated",
        value: function documentSetRelated(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentSetRelated', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentSetRelated') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentSetSurveyInfo",
        value: function documentSetSurveyInfo(docRef, analystID, groupID, usefulness, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentSetSurveyInfo', (0, _assign2.default)({}, {
                docRef: docRef,
                analystID: analystID,
                groupID: groupID,
                usefulness: usefulness
            }, optionalParams || {}), this.paramMap.get('documentSetSurveyInfo') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "documentUpdate",
        value: function documentUpdate(docRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'documentUpdate', (0, _assign2.default)({}, { docRef: docRef }, optionalParams || {}), this.paramMap.get('documentUpdate') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "doesFileExist",
        value: function doesFileExist(fileName, optionalParams) {
            var request = new Request_1.Request(this.service, 'doesFileExist', (0, _assign2.default)({}, { fileName: fileName }, optionalParams || {}), this.paramMap.get('doesFileExist') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "isCallInKnowledgeBase",
        value: function isCallInKnowledgeBase(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'isCallInKnowledgeBase', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('isCallInKnowledgeBase') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "queryKeyword",
        value: function queryKeyword(queryString, queryType, optionalParams) {
            var request = new Request_1.Request(this.service, 'queryKeyword', (0, _assign2.default)({}, {
                queryString: queryString,
                queryType: queryType
            }, optionalParams || {}), this.paramMap.get('queryKeyword') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "queryNatural",
        value: function queryNatural(queryString, optionalParams) {
            var request = new Request_1.Request(this.service, 'queryNatural', (0, _assign2.default)({}, { queryString: queryString }, optionalParams || {}), this.paramMap.get('queryNatural') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "templateList",
        value: function templateList(optionalParams) {
            var request = new Request_1.Request(this.service, 'templateList', optionalParams || {}, this.paramMap.get('templateList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "unpublishedCallAdd",
        value: function unpublishedCallAdd(callRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'unpublishedCallAdd', (0, _assign2.default)({}, { callRef: callRef }, optionalParams || {}), this.paramMap.get('unpublishedCallAdd') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "unpublishedCallDelete",
        value: function unpublishedCallDelete(callRef, optionalParams) {
            var request = new Request_1.Request(this.service, 'unpublishedCallDelete', (0, _assign2.default)({}, { callRef: callRef }, optionalParams || {}), this.paramMap.get('unpublishedCallDelete') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "unpublishedCallList",
        value: function unpublishedCallList(optionalParams) {
            var request = new Request_1.Request(this.service, 'unpublishedCallList', optionalParams || {}, this.paramMap.get('unpublishedCallList') || []);
            return this.connection.sendRequest(request);
        }
    }]);
    return Knowledgebase;
}();

exports.Knowledgebase = Knowledgebase;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(7);

var _assign2 = _interopRequireDefault(_assign);

var _map = __webpack_require__(9);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(5);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var Request_1 = __webpack_require__(10);

var Mylibrary = function () {
    function Mylibrary(connection, xmlmc) {
        (0, _classCallCheck3.default)(this, Mylibrary);

        this.connection = connection;
        this.xmlmc = xmlmc;
        this.service = 'mylibrary';
        this.paramMap = new _map2.default([['addUserLibraryResource', ['resource']], ['createFolder', ['folder']], ['deleteFile', ['file']], ['deleteFolder', ['folder', 'forceDelete']], ['deleteUserLibraryResource', ['name']], ['getFile', ['path']], ['getFolder', ['path', 'includeFiles']], ['getFolderFromPath', ['path', 'includeSubFolders']], ['putFile', ['path', 'forceOverwrite', 'file']], ['renameItem', ['path', 'newName']]]);
    }

    (0, _createClass3.default)(Mylibrary, [{
        key: "addUserLibraryResource",
        value: function addUserLibraryResource(resource, optionalParams) {
            var request = new Request_1.Request(this.service, 'addUserLibraryResource', (0, _assign2.default)({}, { resource: resource }, optionalParams || {}), this.paramMap.get('addUserLibraryResource') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "createFolder",
        value: function createFolder(folder, optionalParams) {
            var request = new Request_1.Request(this.service, 'createFolder', (0, _assign2.default)({}, { folder: folder }, optionalParams || {}), this.paramMap.get('createFolder') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "deleteFile",
        value: function deleteFile(file, optionalParams) {
            var request = new Request_1.Request(this.service, 'deleteFile', (0, _assign2.default)({}, { file: file }, optionalParams || {}), this.paramMap.get('deleteFile') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "deleteFolder",
        value: function deleteFolder(folder, optionalParams) {
            var request = new Request_1.Request(this.service, 'deleteFolder', (0, _assign2.default)({}, { folder: folder }, optionalParams || {}), this.paramMap.get('deleteFolder') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "deleteUserLibraryResource",
        value: function deleteUserLibraryResource(name, optionalParams) {
            var request = new Request_1.Request(this.service, 'deleteUserLibraryResource', (0, _assign2.default)({}, { name: name }, optionalParams || {}), this.paramMap.get('deleteUserLibraryResource') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getFile",
        value: function getFile(path, optionalParams) {
            var request = new Request_1.Request(this.service, 'getFile', (0, _assign2.default)({}, { path: path }, optionalParams || {}), this.paramMap.get('getFile') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getFolder",
        value: function getFolder(optionalParams) {
            var request = new Request_1.Request(this.service, 'getFolder', optionalParams || {}, this.paramMap.get('getFolder') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getFolderFromPath",
        value: function getFolderFromPath(optionalParams) {
            var request = new Request_1.Request(this.service, 'getFolderFromPath', optionalParams || {}, this.paramMap.get('getFolderFromPath') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getUserLibraryResources",
        value: function getUserLibraryResources(optionalParams) {
            var request = new Request_1.Request(this.service, 'getUserLibraryResources', optionalParams || {}, this.paramMap.get('getUserLibraryResources') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "putFile",
        value: function putFile(path, file, optionalParams) {
            var request = new Request_1.Request(this.service, 'putFile', (0, _assign2.default)({}, {
                path: path,
                file: file
            }, optionalParams || {}), this.paramMap.get('putFile') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "renameItem",
        value: function renameItem(path, newName, optionalParams) {
            var request = new Request_1.Request(this.service, 'renameItem', (0, _assign2.default)({}, {
                path: path,
                newName: newName
            }, optionalParams || {}), this.paramMap.get('renameItem') || []);
            return this.connection.sendRequest(request);
        }
    }]);
    return Mylibrary;
}();

exports.Mylibrary = Mylibrary;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _map = __webpack_require__(9);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(5);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var Request_1 = __webpack_require__(10);

var Reporting = function () {
    function Reporting(connection, xmlmc) {
        (0, _classCallCheck3.default)(this, Reporting);

        this.connection = connection;
        this.xmlmc = xmlmc;
        this.service = 'reporting';
        this.paramMap = new _map2.default([['getCustomReportTree', ['folderPath', 'recursive']], ['getSystemReportTree', ['folderID', 'recursive']]]);
    }

    (0, _createClass3.default)(Reporting, [{
        key: "getCustomReportTree",
        value: function getCustomReportTree(optionalParams) {
            var request = new Request_1.Request(this.service, 'getCustomReportTree', optionalParams || {}, this.paramMap.get('getCustomReportTree') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getSystemReportTree",
        value: function getSystemReportTree(optionalParams) {
            var request = new Request_1.Request(this.service, 'getSystemReportTree', optionalParams || {}, this.paramMap.get('getSystemReportTree') || []);
            return this.connection.sendRequest(request);
        }
    }]);
    return Reporting;
}();

exports.Reporting = Reporting;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(7);

var _assign2 = _interopRequireDefault(_assign);

var _map = __webpack_require__(9);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(5);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var Request_1 = __webpack_require__(10);

var Selfservice = function () {
    function Selfservice(connection, xmlmc) {
        (0, _classCallCheck3.default)(this, Selfservice);

        this.connection = connection;
        this.xmlmc = xmlmc;
        this.service = 'selfservice';
        this.paramMap = new _map2.default([['changePassword', ['oldPassword', 'newPassword']], ['customerCancelCall', ['callRef', 'description', 'extraUpdateDbValues']], ['customerGetCallDetails', ['callref', 'formatValues', 'returnMeta', 'returnRawValues']], ['customerGetCallList', ['returnOpen', 'returnClosed', 'returnCancelled', 'formatValues', 'returnMeta', 'returnRawValues']], ['customerGetProfileCodeTree', ['node', 'filter', 'returnFullTree', 'returnInactiveCodes']], ['customerGetResolutionCodeTree', ['node', 'filter', 'returnFullTree', 'returnInactiveCodes']], ['customerLogNewCall', ['logIncoming', 'callClass', 'slaName', 'assetId', 'costCenter', 'probCode', 'site', 'condition', 'groupId', 'analystId', 'timeSpent', 'updateMessage', 'updateCode', 'updateSource', 'fileAttachment', 'additionalCallValues']], ['customerUpdateCall', ['callref', 'timeSpent', 'description', 'updateSource', 'updateCode', 'fileAttachment', 'extraUpdateDbValues']], ['customerUpdateCallValues', ['callref', 'actionVerb', 'updateMessage', 'additionalCallValues']], ['requestPasswordReset', ['selfServiceId', 'customerId', 'loginId']], ['verifyPasswordResetToken', ['selfServiceId', 'customerId', 'loginId', 'token', 'password']]]);
    }

    (0, _createClass3.default)(Selfservice, [{
        key: "changePassword",
        value: function changePassword(oldPassword, newPassword, optionalParams) {
            var request = new Request_1.Request(this.service, 'changePassword', (0, _assign2.default)({}, {
                oldPassword: oldPassword,
                newPassword: newPassword
            }, optionalParams || {}), this.paramMap.get('changePassword') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "customerCancelCall",
        value: function customerCancelCall(callRef, description, optionalParams) {
            var request = new Request_1.Request(this.service, 'customerCancelCall', (0, _assign2.default)({}, {
                callRef: callRef,
                description: description
            }, optionalParams || {}), this.paramMap.get('customerCancelCall') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "customerGetCallDetails",
        value: function customerGetCallDetails(callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'customerGetCallDetails', (0, _assign2.default)({}, { callref: callref }, optionalParams || {}), this.paramMap.get('customerGetCallDetails') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "customerGetCallList",
        value: function customerGetCallList(optionalParams) {
            var request = new Request_1.Request(this.service, 'customerGetCallList', optionalParams || {}, this.paramMap.get('customerGetCallList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "customerGetProfileCodeTree",
        value: function customerGetProfileCodeTree(optionalParams) {
            var request = new Request_1.Request(this.service, 'customerGetProfileCodeTree', optionalParams || {}, this.paramMap.get('customerGetProfileCodeTree') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "customerGetResolutionCodeTree",
        value: function customerGetResolutionCodeTree(optionalParams) {
            var request = new Request_1.Request(this.service, 'customerGetResolutionCodeTree', optionalParams || {}, this.paramMap.get('customerGetResolutionCodeTree') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "customerLogNewCall",
        value: function customerLogNewCall(callClass, groupId, optionalParams) {
            var request = new Request_1.Request(this.service, 'customerLogNewCall', (0, _assign2.default)({}, {
                callClass: callClass,
                groupId: groupId
            }, optionalParams || {}), this.paramMap.get('customerLogNewCall') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "customerUpdateCall",
        value: function customerUpdateCall(callref, timeSpent, description, optionalParams) {
            var request = new Request_1.Request(this.service, 'customerUpdateCall', (0, _assign2.default)({}, {
                callref: callref,
                timeSpent: timeSpent,
                description: description
            }, optionalParams || {}), this.paramMap.get('customerUpdateCall') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "customerUpdateCallValues",
        value: function customerUpdateCallValues(callref, additionalCallValues, optionalParams) {
            var request = new Request_1.Request(this.service, 'customerUpdateCallValues', (0, _assign2.default)({}, {
                callref: callref,
                additionalCallValues: additionalCallValues
            }, optionalParams || {}), this.paramMap.get('customerUpdateCallValues') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "requestPasswordReset",
        value: function requestPasswordReset(selfServiceId, optionalParams) {
            var request = new Request_1.Request(this.service, 'requestPasswordReset', (0, _assign2.default)({}, { selfServiceId: selfServiceId }, optionalParams || {}), this.paramMap.get('requestPasswordReset') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "verifyPasswordResetToken",
        value: function verifyPasswordResetToken(selfServiceId, token, password, optionalParams) {
            var request = new Request_1.Request(this.service, 'verifyPasswordResetToken', (0, _assign2.default)({}, {
                selfServiceId: selfServiceId,
                token: token,
                password: password
            }, optionalParams || {}), this.paramMap.get('verifyPasswordResetToken') || []);
            return this.connection.sendRequest(request);
        }
    }]);
    return Selfservice;
}();

exports.Selfservice = Selfservice;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(7);

var _assign2 = _interopRequireDefault(_assign);

var _map = __webpack_require__(9);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(5);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var Request_1 = __webpack_require__(10);

var Survey = function () {
    function Survey(connection, xmlmc) {
        (0, _classCallCheck3.default)(this, Survey);

        this.connection = connection;
        this.xmlmc = xmlmc;
        this.service = 'survey';
        this.paramMap = new _map2.default([['sendCustomerCallSurvey', ['surveyId', 'callref']]]);
    }

    (0, _createClass3.default)(Survey, [{
        key: "sendCustomerCallSurvey",
        value: function sendCustomerCallSurvey(surveyId, callref, optionalParams) {
            var request = new Request_1.Request(this.service, 'sendCustomerCallSurvey', (0, _assign2.default)({}, {
                surveyId: surveyId,
                callref: callref
            }, optionalParams || {}), this.paramMap.get('sendCustomerCallSurvey') || []);
            return this.connection.sendRequest(request);
        }
    }]);
    return Survey;
}();

exports.Survey = Survey;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(7);

var _assign2 = _interopRequireDefault(_assign);

var _map = __webpack_require__(9);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(5);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var Request_1 = __webpack_require__(10);

var System = function () {
    function System(connection, xmlmc) {
        (0, _classCallCheck3.default)(this, System);

        this.connection = connection;
        this.xmlmc = xmlmc;
        this.service = 'system';
        this.paramMap = new _map2.default([['getTimezoneDetails', ['timeZone']], ['getTimezoneOffset', ['timeZone']], ['multiClipAddItem', ['personalClipboard', 'name', 'itemData', 'multiClipGroup']], ['multiClipDeleteItem', ['itemId']], ['multiClipGetItemData', ['itemId']], ['multiClipSetItemData', ['itemId', 'itemData']], ['offsetEpochTime', ['epochTime', 'timeZone']], ['sendProductFeedback', ['app', 'message', 'nps']]]);
    }

    (0, _createClass3.default)(System, [{
        key: "getFileTypeRestriction",
        value: function getFileTypeRestriction(optionalParams) {
            var request = new Request_1.Request(this.service, 'getFileTypeRestriction', optionalParams || {}, this.paramMap.get('getFileTypeRestriction') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getSystemInfo",
        value: function getSystemInfo(optionalParams) {
            var request = new Request_1.Request(this.service, 'getSystemInfo', optionalParams || {}, this.paramMap.get('getSystemInfo') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getTimezoneDetails",
        value: function getTimezoneDetails(optionalParams) {
            var request = new Request_1.Request(this.service, 'getTimezoneDetails', optionalParams || {}, this.paramMap.get('getTimezoneDetails') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getTimezoneList",
        value: function getTimezoneList(optionalParams) {
            var request = new Request_1.Request(this.service, 'getTimezoneList', optionalParams || {}, this.paramMap.get('getTimezoneList') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "getTimezoneOffset",
        value: function getTimezoneOffset(optionalParams) {
            var request = new Request_1.Request(this.service, 'getTimezoneOffset', optionalParams || {}, this.paramMap.get('getTimezoneOffset') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "multiClipAddItem",
        value: function multiClipAddItem(personalClipboard, name, itemData, optionalParams) {
            var request = new Request_1.Request(this.service, 'multiClipAddItem', (0, _assign2.default)({}, {
                personalClipboard: personalClipboard,
                name: name,
                itemData: itemData
            }, optionalParams || {}), this.paramMap.get('multiClipAddItem') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "multiClipDeleteItem",
        value: function multiClipDeleteItem(itemId, optionalParams) {
            var request = new Request_1.Request(this.service, 'multiClipDeleteItem', (0, _assign2.default)({}, { itemId: itemId }, optionalParams || {}), this.paramMap.get('multiClipDeleteItem') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "multiClipGetItemData",
        value: function multiClipGetItemData(itemId, optionalParams) {
            var request = new Request_1.Request(this.service, 'multiClipGetItemData', (0, _assign2.default)({}, { itemId: itemId }, optionalParams || {}), this.paramMap.get('multiClipGetItemData') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "multiClipGetTree",
        value: function multiClipGetTree(optionalParams) {
            var request = new Request_1.Request(this.service, 'multiClipGetTree', optionalParams || {}, this.paramMap.get('multiClipGetTree') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "multiClipSetItemData",
        value: function multiClipSetItemData(itemId, itemData, optionalParams) {
            var request = new Request_1.Request(this.service, 'multiClipSetItemData', (0, _assign2.default)({}, {
                itemId: itemId,
                itemData: itemData
            }, optionalParams || {}), this.paramMap.get('multiClipSetItemData') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "offsetEpochTime",
        value: function offsetEpochTime(epochTime, optionalParams) {
            var request = new Request_1.Request(this.service, 'offsetEpochTime', (0, _assign2.default)({}, { epochTime: epochTime }, optionalParams || {}), this.paramMap.get('offsetEpochTime') || []);
            return this.connection.sendRequest(request);
        }
    }, {
        key: "sendProductFeedback",
        value: function sendProductFeedback(message, optionalParams) {
            var request = new Request_1.Request(this.service, 'sendProductFeedback', (0, _assign2.default)({}, { message: message }, optionalParams || {}), this.paramMap.get('sendProductFeedback') || []);
            return this.connection.sendRequest(request);
        }
    }]);
    return System;
}();

exports.System = System;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var required = __webpack_require__(178)
  , qs = __webpack_require__(179)
  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i
  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;

/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */
var rules = [
  ['#', 'hash'],                        // Extract from the back.
  ['?', 'query'],                       // Extract from the back.
  ['/', 'pathname'],                    // Extract from the back.
  ['@', 'auth', 1],                     // Extract from the front.
  [NaN, 'host', undefined, 1, 1],       // Set left over value.
  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
];

/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */
var ignore = { hash: 1, query: 1 };

/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @api public
 */
function lolcation(loc) {
  loc = loc || global.location || {};

  var finaldestination = {}
    , type = typeof loc
    , key;

  if ('blob:' === loc.protocol) {
    finaldestination = new URL(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new URL(loc, {});
    for (key in ignore) delete finaldestination[key];
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
}

/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @api private
 */
function extractProtocol(address) {
  var match = protocolre.exec(address);

  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}

/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @api private
 */
function resolve(relative, base) {
  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
    , i = path.length
    , last = path[i - 1]
    , unshift = false
    , up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');

  return path.join('/');
}

/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} location Location defaults for relative paths.
 * @param {Boolean|Function} parser Parser for the query string.
 * @api public
 */
function URL(address, location, parser) {
  if (!(this instanceof URL)) {
    return new URL(address, location, parser);
  }

  var relative, extracted, parse, instruction, index, key
    , instructions = rules.slice()
    , type = typeof location
    , url = this
    , i = 0;

  //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //
  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;

  location = lolcation(location);

  //
  // Extract protocol information before running the instructions.
  //
  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest;

  //
  // When the authority component is absent the URL starts with a path
  // component.
  //
  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];

  for (; i < instructions.length; i++) {
    instruction = instructions[i];
    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if ((index = parse.exec(address))) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (
      relative && instruction[3] ? location[key] || '' : ''
    );

    //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //
    if (instruction[4]) url[key] = url[key].toLowerCase();
  }

  //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //
  if (parser) url.query = parser(url.query);

  //
  // If the URL is relative, resolve the pathname against the base URL.
  //
  if (
      relative
    && location.slashes
    && url.pathname.charAt(0) !== '/'
    && (url.pathname !== '' || location.pathname !== '')
  ) {
    url.pathname = resolve(url.pathname, location.pathname);
  }

  //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //
  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  }

  //
  // Parse down the `auth` for the username and password.
  //
  url.username = url.password = '';
  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  //
  // The href is just the compiled result.
  //
  url.href = url.toString();
}

/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL}
 * @api public
 */
function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname +':'+ value;
      }

      break;

    case 'hostname':
      url[part] = value;

      if (url.port) value += ':'+ url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
    case 'hash':
      if (value) {
        var char = part === 'pathname' ? '/' : '#';
        url[part] = value.charAt(0) !== char ? char + value : value;
      } else {
        url[part] = value;
      }
      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];

    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  url.href = url.toString();

  return url;
}

/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String}
 * @api public
 */
function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

  var query
    , url = this
    , protocol = url.protocol;

  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

  var result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':'+ url.password;
    result += '@';
  }

  result += url.host + url.pathname;

  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

  if (url.hash) result += url.hash;

  return result;
}

URL.prototype = { set: set, toString: toString };

//
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//
URL.extractProtocol = extractProtocol;
URL.location = lolcation;
URL.qs = qs;

module.exports = URL;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(177)))

/***/ }),
/* 177 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */
module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;

  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
    return port !== 80;

    case 'https':
    case 'wss':
    return port !== 443;

    case 'ftp':
    return port !== 21;

    case 'gopher':
    return port !== 70;

    case 'file':
    return false;
  }

  return port !== 0;
};


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty;

/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String} The decoded string.
 * @api private
 */
function decode(input) {
  return decodeURIComponent(input.replace(/\+/g, ' '));
}

/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */
function querystring(query) {
  var parser = /([^=?&]+)=?([^&]*)/g
    , result = {}
    , part;

  //
  // Little nifty parsing hack, leverage the fact that RegExp.exec increments
  // the lastIndex property so we can continue executing this loop until we've
  // parsed all results.
  //
  for (;
    part = parser.exec(query);
    result[decode(part[1])] = decode(part[2])
  );

  return result;
}

/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */
function querystringify(obj, prefix) {
  prefix = prefix || '';

  var pairs = [];

  //
  // Optionally prefix with a '?' if needed
  //
  if ('string' !== typeof prefix) prefix = '?';

  for (var key in obj) {
    if (has.call(obj, key)) {
      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
}

//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;


/***/ })
/******/ ]);
});