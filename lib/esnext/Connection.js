"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const tough_cookie_1 = require("tough-cookie");
const axiosCookieJarSupport = require("@3846masa/axios-cookiejar-support");
/**
 * @typedef {Object} Response
 * @param {boolean} status
 * @param {Object} params
 */
/**
 * Class represents a server connection.
 * Responsible for maintaining a connection to the server.
 * Ensures that a cookie is saved each time a request is sent and received.
 */
class Connection {
    /**
     * Create a connection. Defers to the private _connect method.
     * @param {string} server - IP or FQDN to send the requests to
     * @param {number} port - Port to use when sending the requests. For https use 443. Defaults to 5015.
     */
    constructor(server = 'localhost', port = 5015) {
        this.server = server;
        this.port = port;
        this.https = false;
        this.storeCookies = typeof window === 'undefined';
        if (this.storeCookies) {
            this._setupCookieJar(new tough_cookie_1.CookieJar(), axiosCookieJarSupport);
        }
        else {
            this._connect(server, port);
        }
    }
    /**
     * private connect method. Responsible for inferring https.
     * Creates an instance of axios to use to send requests to and from the server.
     * @param server
     * @param port
     * @returns {*}
     * @private
     */
    _connect(server, port) {
        let url;
        switch (port) {
            case 443:
                this.https = true;
                url = `https://${server}/sw/`;
                break;
            case 80:
                url = `http://${server}/sw/`;
                break;
            default:
                url = `http://${server}:${port}`;
        }
        this.endpoint = axios_1.default.create({
            baseURL: url,
            headers: {
                "Content-Type": "text/xmlmc",
                "Charset": "UTF-8",
                "Accept": "text/json",
                "Accept-Charset": "UTF-8",
                "Cache-Control": "no-cache",
            },
            transformResponse,
        });
    }
    /**
     * @param xmlmc
     * @returns {Promise.<Response>}
     * @throws Module importing error. Occurs if for some reason we were unable to require the underlying modules. Indicates a problem with the library, not the developer.
     */
    async sendRequest(xmlmc) {
        return new Promise((resolve, reject) => {
            const post = this.port === 80 || this.https ? '/xmlmc/' : '/sw';
            this.endpoint.post(post, xmlmc.toString()).then((response) => {
                response.data.status ? resolve(response.data) : reject(response.data);
            }).catch((err) => {
                reject(err);
            });
        });
    }
    _setupCookieJar(jar, axiosCookieJar) {
        axiosCookieJar(axios_1.default);
        // create the cookie jar we will use
        this.cookieJar = jar;
        // create an instnace of axios
        this._connect(this.server, this.port);
        // tell the instance to use the cookie jar
        this.endpoint.defaults.jar = this.cookieJar;
        // Automatically send the cookie with each request
        this.endpoint.defaults.withCredentials = true;
        const endpoint = this.endpoint;
        const defaultConfig = endpoint.defaults;
        // Pass the entire URL including the base URL with each post
        // todo: May not be neccessary, but could be good to do the same for get method as well.
        endpoint['post'] = (url, data, config) => {
            let requestConfig = Object.assign(config || {}, {
                method: 'POST',
                url: url.match(/^(\/)\w+/) ? (defaultConfig.baseURL ? defaultConfig.baseURL + url : url) : (url === "" ? (defaultConfig.baseURL || url) : url),
                data: data,
            });
            return endpoint.request(requestConfig);
        };
    }
}
exports.Connection = Connection;
function transformResponse(response) {
    let parsedResponse = JSON.parse(response);
    let { '@status': status, data, ...rest } = parsedResponse;
    parsedResponse = Object.assign({ status: status, params: {}, data: [] }, rest);
    data = isIterable(data) && data;
    if (data) {
        parsedResponse.data = handleDataParam(data);
        if (data.hasOwnProperty('metaData')) {
            parsedResponse.params.metadata = data.metaData;
        }
        if (data.hasOwnProperty('generatedId')) {
            parsedResponse.params.generatedId = data.generatedId;
        }
    }
    return parsedResponse;
}
function handleDataParam(data) {
    if (Array.isArray(data)) {
        return data;
    }
    if (data.hasOwnProperty('rowData')) {
        return (Array.isArray(data.rowData.row) && data.rowData.row) || [data.rowData.row];
    }
}
function isIterable(obj) {
    // checks for null and undefined
    if (obj == null) {
        return false;
    }
    return Object(obj) === obj || typeof obj[Symbol.iterator] === 'function';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29ubmVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db25uZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQXdGO0FBRXhGLCtDQUF1QztBQUN2QywyRUFBNEU7QUFFNUU7Ozs7R0FJRztBQUVIOzs7O0dBSUc7QUFHSDtJQVNJOzs7O09BSUc7SUFDSCxZQUFZLFNBQWlCLFdBQVcsRUFBRSxPQUFlLElBQUk7UUFDekQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUM7UUFDbEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDcEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLHdCQUFTLEVBQUUsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1FBQ2pFLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNLLFFBQVEsQ0FBQyxNQUFjLEVBQUUsSUFBWTtRQUN6QyxJQUFJLEdBQUcsQ0FBQztRQUNSLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDWCxLQUFLLEdBQUc7Z0JBQ0osSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLEdBQUcsR0FBRyxXQUFXLE1BQU0sTUFBTSxDQUFDO2dCQUM5QixLQUFLLENBQUM7WUFDVixLQUFLLEVBQUU7Z0JBQ0gsR0FBRyxHQUFHLFVBQVUsTUFBTSxNQUFNLENBQUM7Z0JBQzdCLEtBQUssQ0FBQztZQUNWO2dCQUNJ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SUFDaEIsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2RixDQUFDO0FBQ0wsQ0FBQztBQUVELG9CQUFvQixHQUFRO0lBQ3hCLGdDQUFnQztJQUNoQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxVQUFVLENBQUM7QUFDN0UsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodHRwLCB7QXhpb3NFcnJvciwgQXhpb3NJbnN0YW5jZSwgQXhpb3NSZXF1ZXN0Q29uZmlnLCBBeGlvc1Jlc3BvbnNlfSBmcm9tICdheGlvcydcbmltcG9ydCB7UmVxdWVzdH0gZnJvbSBcIi4vUmVxdWVzdFwiO1xuaW1wb3J0IHtDb29raWVKYXJ9IGZyb20gXCJ0b3VnaC1jb29raWVcIjtcbmltcG9ydCBheGlvc0Nvb2tpZUphclN1cHBvcnQgPSByZXF1aXJlKCdAMzg0Nm1hc2EvYXhpb3MtY29va2llamFyLXN1cHBvcnQnKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSZXNwb25zZVxuICogQHBhcmFtIHtib29sZWFufSBzdGF0dXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAqL1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudHMgYSBzZXJ2ZXIgY29ubmVjdGlvbi5cbiAqIFJlc3BvbnNpYmxlIGZvciBtYWludGFpbmluZyBhIGNvbm5lY3Rpb24gdG8gdGhlIHNlcnZlci5cbiAqIEVuc3VyZXMgdGhhdCBhIGNvb2tpZSBpcyBzYXZlZCBlYWNoIHRpbWUgYSByZXF1ZXN0IGlzIHNlbnQgYW5kIHJlY2VpdmVkLlxuICovXG5cblxuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb24ge1xuXG4gICAgcHJvdGVjdGVkIHNlcnZlcjogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwb3J0OiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGh0dHBzOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBzdG9yZUNvb2tpZXM6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGVuZHBvaW50OiBBeGlvc0luc3RhbmNlO1xuICAgIHByb3RlY3RlZCBjb29raWVKYXI6IENvb2tpZUphcjtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNvbm5lY3Rpb24uIERlZmVycyB0byB0aGUgcHJpdmF0ZSBfY29ubmVjdCBtZXRob2QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZlciAtIElQIG9yIEZRRE4gdG8gc2VuZCB0aGUgcmVxdWVzdHMgdG9cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcG9ydCAtIFBvcnQgdG8gdXNlIHdoZW4gc2VuZGluZyB0aGUgcmVxdWVzdHMuIEZvciBodHRwcyB1c2UgNDQzLiBEZWZhdWx0cyB0byA1MDE1LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlcnZlcjogc3RyaW5nID0gJ2xvY2FsaG9zdCcsIHBvcnQ6IG51bWJlciA9IDUwMTUpIHtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgICAgIHRoaXMucG9ydCA9IHBvcnQ7XG4gICAgICAgIHRoaXMuaHR0cHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdG9yZUNvb2tpZXMgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHRoaXMuc3RvcmVDb29raWVzKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXR1cENvb2tpZUphcihuZXcgQ29va2llSmFyKCksIGF4aW9zQ29va2llSmFyU3VwcG9ydCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0KHNlcnZlciwgcG9ydCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwcml2YXRlIGNvbm5lY3QgbWV0aG9kLiBSZXNwb25zaWJsZSBmb3IgaW5mZXJyaW5nIGh0dHBzLlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYXhpb3MgdG8gdXNlIHRvIHNlbmQgcmVxdWVzdHMgdG8gYW5kIGZyb20gdGhlIHNlcnZlci5cbiAgICAgKiBAcGFyYW0gc2VydmVyXG4gICAgICogQHBhcmFtIHBvcnRcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHByaXZhdGUgX2Nvbm5lY3Qoc2VydmVyOiBzdHJpbmcsIHBvcnQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBsZXQgdXJsO1xuICAgICAgICBzd2l0Y2ggKHBvcnQpIHtcbiAgICAgICAgICAgIGNhc2UgNDQzOlxuICAgICAgICAgICAgICAgIHRoaXMuaHR0cHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHVybCA9IGBodHRwczovLyR7c2VydmVyfS9zdy9gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA4MDpcbiAgICAgICAgICAgICAgICB1cmwgPSBgaHR0cDovLyR7c2VydmVyfS9zdy9gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB1cmwgPSBgaHR0cDovLyR7c2VydmVyfToke3BvcnR9YDtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgdGhpcy5lbmRwb2ludCA9IGh0dHAuY3JlYXRlKHtcbiAgICAgICAgICAgIGJhc2VVUkw6IHVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcInRleHQveG1sbWNcIixcbiAgICAgICAgICAgICAgICBcIkNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgICAgICAgICAgICAgIFwiQWNjZXB0XCI6IFwidGV4dC9qc29uXCIsXG4gICAgICAgICAgICAgICAgXCJBY2NlcHQtQ2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgICAgICAgICAgICAgXCJDYWNoZS1Db250cm9sXCI6IFwibm8tY2FjaGVcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geG1sbWNcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48UmVzcG9uc2U+fVxuICAgICAqIEB0aHJvd3MgTW9kdWxlIGltcG9ydGluZyBlcnJvci4gT2NjdXJzIGlmIGZvciBzb21lIHJlYXNvbiB3ZSB3ZXJlIHVuYWJsZSB0byByZXF1aXJlIHRoZSB1bmRlcmx5aW5nIG1vZHVsZXMuIEluZGljYXRlcyBhIHByb2JsZW0gd2l0aCB0aGUgbGlicmFyeSwgbm90IHRoZSBkZXZlbG9wZXIuXG4gICAgICovXG4gICAgYXN5bmMgc2VuZFJlcXVlc3QoeG1sbWM6IFJlcXVlc3QpOiBQcm9taXNlPEF4aW9zUmVzcG9uc2VbJ2RhdGEnXSB8IEF4aW9zRXJyb3I+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBvc3Q6IHN0cmluZyA9IHRoaXMucG9ydCA9PT0gODAgfHwgdGhpcy5odHRwcyA/ICcveG1sbWMvJyA6ICcvc3cnO1xuICAgICAgICAgICAgdGhpcy5lbmRwb2ludC5wb3N0KHBvc3QsIHhtbG1jLnRvU3RyaW5nKCkpLnRoZW4oKHJlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5zdGF0dXMgPyByZXNvbHZlKHJlc3BvbnNlLmRhdGEpIDogcmVqZWN0KHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgfSkuY2F0Y2goKGVycjogQXhpb3NFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc2V0dXBDb29raWVKYXIoamFyOiBDb29raWVKYXIsIGF4aW9zQ29va2llSmFyOiAoaW5zdGFuY2U6IEF4aW9zSW5zdGFuY2UpID0+IEF4aW9zSW5zdGFuY2UpOiB2b2lkIHtcbiAgICAgICAgYXhpb3NDb29raWVKYXIoaHR0cCk7XG5cbiAgICAgICAgLy8gY3JlYXRlIHRoZSBjb29raWUgamFyIHdlIHdpbGwgdXNlXG4gICAgICAgIHRoaXMuY29va2llSmFyID0gamFyO1xuICAgICAgICAvLyBjcmVhdGUgYW4gaW5zdG5hY2Ugb2YgYXhpb3NcbiAgICAgICAgdGhpcy5fY29ubmVjdCh0aGlzLnNlcnZlciwgdGhpcy5wb3J0KTtcbiAgICAgICAgLy8gdGVsbCB0aGUgaW5zdGFuY2UgdG8gdXNlIHRoZSBjb29raWUgamFyXG4gICAgICAgIHRoaXMuZW5kcG9pbnQuZGVmYXVsdHMuamFyID0gdGhpcy5jb29raWVKYXI7XG4gICAgICAgIC8vIEF1dG9tYXRpY2FsbHkgc2VuZCB0aGUgY29va2llIHdpdGggZWFjaCByZXF1ZXN0XG4gICAgICAgIHRoaXMuZW5kcG9pbnQuZGVmYXVsdHMud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCBlbmRwb2ludCA9IHRoaXMuZW5kcG9pbnQ7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRDb25maWcgPSBlbmRwb2ludC5kZWZhdWx0cztcblxuICAgICAgICAvLyBQYXNzIHRoZSBlbnRpcmUgVVJMIGluY2x1ZGluZyB0aGUgYmFzZSBVUkwgd2l0aCBlYWNoIHBvc3RcbiAgICAgICAgLy8gdG9kbzogTWF5IG5vdCBiZSBuZWNjZXNzYXJ5LCBidXQgY291bGQgYmUgZ29vZCB0byBkbyB0aGUgc2FtZSBmb3IgZ2V0IG1ldGhvZCBhcyB3ZWxsLlxuXG5cbiAgICAgICAgZW5kcG9pbnRbJ3Bvc3QnXSA9ICh1cmw6IHN0cmluZywgZGF0YTogQXhpb3NSZXNwb25zZVsnZGF0YSddLCBjb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZykgPT4ge1xuICAgICAgICAgICAgbGV0IHJlcXVlc3RDb25maWcgPSBPYmplY3QuYXNzaWduKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIHVybDogdXJsLm1hdGNoKC9eKFxcLylcXHcrLykgPyAoZGVmYXVsdENvbmZpZy5iYXNlVVJMID8gZGVmYXVsdENvbmZpZy5iYXNlVVJMICsgdXJsIDogdXJsKSA6ICh1cmwgPT09IFwiXCIgPyAoZGVmYXVsdENvbmZpZy5iYXNlVVJMIHx8IHVybCkgOiB1cmwpLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBlbmRwb2ludC5yZXF1ZXN0KHJlcXVlc3RDb25maWcpXG4gICAgICAgIH1cblxuICAgIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UocmVzcG9uc2U6IHN0cmluZykge1xuICAgIGxldCBwYXJzZWRSZXNwb25zZTogQXhpb3NSZXNwb25zZVsnZGF0YSddID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG4gICAgbGV0IHsnQHN0YXR1cyc6IHN0YXR1cywgZGF0YSwgLi4ucmVzdH0gPSBwYXJzZWRSZXNwb25zZTtcbiAgICBwYXJzZWRSZXNwb25zZSA9IE9iamVjdC5hc3NpZ24oe3N0YXR1czogc3RhdHVzLCBwYXJhbXM6IHt9LCBkYXRhOiBbXX0sIHJlc3QpO1xuXG4gICAgZGF0YSA9IGlzSXRlcmFibGUoZGF0YSkgJiYgZGF0YTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgICBwYXJzZWRSZXNwb25zZS5kYXRhID0gaGFuZGxlRGF0YVBhcmFtKGRhdGEpO1xuXG4gICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdtZXRhRGF0YScpKSB7XG4gICAgICAgICAgICBwYXJzZWRSZXNwb25zZS5wYXJhbXMubWV0YWRhdGEgPSBkYXRhLm1ldGFEYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2dlbmVyYXRlZElkJykpIHtcbiAgICAgICAgICAgIHBhcnNlZFJlc3BvbnNlLnBhcmFtcy5nZW5lcmF0ZWRJZCA9IGRhdGEuZ2VuZXJhdGVkSWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VkUmVzcG9uc2U7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZURhdGFQYXJhbShkYXRhOiBBeGlvc1Jlc3BvbnNlWydkYXRhJ10pOiBBeGlvc1Jlc3BvbnNlWydkYXRhJ10ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgncm93RGF0YScpKSB7XG4gICAgICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShkYXRhLnJvd0RhdGEucm93KSAmJiBkYXRhLnJvd0RhdGEucm93KSB8fCBbZGF0YS5yb3dEYXRhLnJvd107XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0l0ZXJhYmxlKG9iajogYW55KTogYm9vbGVhbiB7XG4gICAgLy8gY2hlY2tzIGZvciBudWxsIGFuZCB1bmRlZmluZWRcbiAgICBpZiAob2JqID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qob2JqKSA9PT0gb2JqIHx8IHR5cGVvZiBvYmpbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuXG4iXX0=