"use strict";
var xmlmc;
(function (xmlmc) {
    xmlmc.sessionVariableMap = ['name', 'value'];
    xmlmc.userLibraryResourceMap = ['name', 'url'];
    xmlmc.embeddedFileAttachmentMap = ['fileName', 'fileData', 'timeStamp', 'mimeType', 'contentId'];
    xmlmc.newWorkListItemMap = [
        'description',
        'time',
        'assignToGroup',
        'assignToAnalyst',
        'actionBy',
        'priority',
        'type',
        'reminder',
        'remindAssignee',
        'remindCallOwner',
        'notifyGroup',
    ];
    xmlmc.fileAttachmentMap = [
        'fileName',
        'fileSource',
        'timeStamp',
        'mimeType',
        'fileSize',
        'contentId',
    ];
    xmlmc.keyPairMap = [
        'keyName',
        'keyValue'
    ];
    xmlmc.workItemInfoMap = [
        'id',
        'parentGroup',
        'description',
        'time',
        'assignToGroup',
        'assignToAnalyst?',
        'actionBy',
        'priority',
        'type',
        'reminder?',
        'remindAssignee?',
        'remindCallOwner?',
        'notifyGroup?'
    ];
    let WorkItemActionBy;
    (function (WorkItemActionBy) {
        WorkItemActionBy[WorkItemActionBy["ASIGNEE"] = 0] = "ASIGNEE";
        WorkItemActionBy[WorkItemActionBy["ASIGNEE_GROUP"] = 1] = "ASIGNEE_GROUP";
        WorkItemActionBy[WorkItemActionBy["ANY"] = 3] = "ANY";
    })(WorkItemActionBy = xmlmc.WorkItemActionBy || (xmlmc.WorkItemActionBy = {}));
})(xmlmc || (xmlmc = {}));
module.exports = xmlmc;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWG1sbWNUeXBlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBlcy9YbWxtY1R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxJQUFPLEtBQUssQ0F1S1g7QUF2S0QsV0FBTyxLQUFLO0lBdUNHLHdCQUFrQixHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBT3ZDLDRCQUFzQixHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBVXpDLCtCQUF5QixHQUFHLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBZ0IzRix3QkFBa0IsR0FBRztRQUM1QixhQUFhO1FBQ2IsTUFBTTtRQUNOLGVBQWU7UUFDZixpQkFBaUI7UUFDakIsVUFBVTtRQUNWLFVBQVU7UUFDVixNQUFNO1FBQ04sVUFBVTtRQUNWLGdCQUFnQjtRQUNoQixpQkFBaUI7UUFDakIsYUFBYTtLQUNoQixDQUFDO0lBV1MsdUJBQWlCLEdBQUc7UUFDM0IsVUFBVTtRQUNWLFlBQVk7UUFDWixXQUFXO1FBQ1gsVUFBVTtRQUNWLFVBQVU7UUFDVixXQUFXO0tBQ2QsQ0FBQztJQU9TLGdCQUFVLEdBQUc7UUFDcEIsU0FBUztRQUNULFVBQVU7S0FDYixDQUFDO0lBMEJTLHFCQUFlLEdBQUc7UUFDekIsSUFBSTtRQUNKLGFBQWE7UUFDYixhQUFhO1FBQ2IsTUFBTTtRQUNOLGVBQWU7UUFDZixrQkFBa0I7UUFDbEIsVUFBVTtRQUNWLFVBQVU7UUFDVixNQUFNO1FBQ04sV0FBVztRQUNYLGlCQUFpQjtRQUNqQixrQkFBa0I7UUFDbEIsY0FBYztLQUNqQixDQUFDO0lBRUYsSUFBWSxnQkFJWDtJQUpELFdBQVksZ0JBQWdCO1FBQ3hCLDZEQUFXLENBQUE7UUFDWCx5RUFBaUIsQ0FBQTtRQUNqQixxREFBTyxDQUFBO0lBQ1gsQ0FBQyxFQUpXLGdCQUFnQixHQUFoQixzQkFBZ0IsS0FBaEIsc0JBQWdCLFFBSTNCO0FBU0wsQ0FBQyxFQXZLTSxLQUFLLEtBQUwsS0FBSyxRQXVLWDtBQUVELGlCQUFTLEtBQUssQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7WE1MRWxlbWVudE9yWE1MTm9kZX0gZnJvbSBcInhtbGJ1aWxkZXJcIjtcblxuXG5tb2R1bGUgeG1sbWMge1xuXG4gICAgZXhwb3J0IHR5cGUgWG1sbWNQYXJhbSA9XG4gICAgICAgIHN0cmluZ1xuICAgICAgICB8IG51bWJlclxuICAgICAgICB8IERhdGVcbiAgICAgICAgfCBYbWxtY1BhcmFtc1xuICAgICAgICB8IGJvb2xlYW5cbiAgICAgICAgfCBTZXNzaW9uVmFyaWFibGVcbiAgICAgICAgfCBFbWJlZGRlZEZpbGVBdHRhY2htZW50XG4gICAgICAgIHwgTmV3V29ya0xpc3RJdGVtXG4gICAgICAgIHwgRmlsZUF0dGFjaG1lbnRcbiAgICAgICAgfCBLZXlQYWlyXG4gICAgICAgIHwgV29ya0l0ZW1MaXN0XG4gICAgICAgIHwgV29ya0l0ZW1JbmZvXG4gICAgICAgIHwgRmlsZUxpc3RcbiAgICAgICAgfCBVc2VyTGlicmFyeVJlc291cmNlSXRlbVxuICAgICAgICB8IHVuZGVmaW5lZFxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBYbWxtY1BhcmFtcyB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IFhtbG1jUGFyYW1cbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFhtbG1jUmVxdWVzdCB7XG4gICAgICAgIHNlcnZpY2U6IHN0cmluZztcbiAgICAgICAgbWV0aG9kOiBzdHJpbmc7XG4gICAgICAgIHBhcmFtc05vdFNldDogYm9vbGVhbjtcbiAgICAgICAgeG1sbWM6IFhNTEVsZW1lbnRPclhNTE5vZGU7XG5cbiAgICAgICAgX2NyZWF0ZVhtbG1jKHBhcmFtczogWG1sbWNQYXJhbSwgZWw6IFhNTEVsZW1lbnRPclhNTE5vZGUsIGtleTogc3RyaW5nKTogdm9pZFxuXG4gICAgICAgIHRvU3RyaW5nKCk6IHN0cmluZ1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgU2Vzc2lvblZhcmlhYmxlIHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgIH1cblxuICAgIGV4cG9ydCBsZXQgc2Vzc2lvblZhcmlhYmxlTWFwID0gWyduYW1lJywgJ3ZhbHVlJ107XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFVzZXJMaWJyYXJ5UmVzb3VyY2VJdGVtIHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICB1cmw6IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgbGV0IHVzZXJMaWJyYXJ5UmVzb3VyY2VNYXAgPSBbJ25hbWUnLCAndXJsJ107XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIEVtYmVkZGVkRmlsZUF0dGFjaG1lbnQge1xuICAgICAgICBmaWxlTmFtZTogc3RyaW5nO1xuICAgICAgICBmaWxlRGF0YTogc3RyaW5nO1xuICAgICAgICB0aW1lU3RhbXA/OiBEYXRlO1xuICAgICAgICBtaW1lVHlwZT86IHN0cmluZztcbiAgICAgICAgY29udGVudElkPzogc3RyaW5nO1xuICAgIH1cblxuICAgIGV4cG9ydCBsZXQgZW1iZWRkZWRGaWxlQXR0YWNobWVudE1hcCA9IFsnZmlsZU5hbWUnLCAnZmlsZURhdGEnLCAndGltZVN0YW1wJywgJ21pbWVUeXBlJywgJ2NvbnRlbnRJZCddO1xuXG4gICAgZXhwb3J0IGludGVyZmFjZSBOZXdXb3JrTGlzdEl0ZW0ge1xuICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgICAgICB0aW1lOiBudW1iZXI7XG4gICAgICAgIGFzc2lnblRvR3JvdXA6IHN0cmluZztcbiAgICAgICAgYXNzaWduVG9BbmFseXN0Pzogc3RyaW5nO1xuICAgICAgICBhY3Rpb25CeTogc3RyaW5nO1xuICAgICAgICBwcmlvcml0eTogc3RyaW5nO1xuICAgICAgICB0eXBlOiBzdHJpbmc7XG4gICAgICAgIHJlbWluZGVyPzogbnVtYmVyO1xuICAgICAgICByZW1pbmRBc3NpZ25lZT86IGJvb2xlYW47XG4gICAgICAgIHJlbWluZENhbGxPd25lcj86IGJvb2xlYW47XG4gICAgICAgIG5vdGlmeUdyb3VwPzogYm9vbGVhbjtcbiAgICB9XG5cbiAgICBleHBvcnQgbGV0IG5ld1dvcmtMaXN0SXRlbU1hcCA9IFtcbiAgICAgICAgJ2Rlc2NyaXB0aW9uJyxcbiAgICAgICAgJ3RpbWUnLFxuICAgICAgICAnYXNzaWduVG9Hcm91cCcsXG4gICAgICAgICdhc3NpZ25Ub0FuYWx5c3QnLFxuICAgICAgICAnYWN0aW9uQnknLFxuICAgICAgICAncHJpb3JpdHknLFxuICAgICAgICAndHlwZScsXG4gICAgICAgICdyZW1pbmRlcicsXG4gICAgICAgICdyZW1pbmRBc3NpZ25lZScsXG4gICAgICAgICdyZW1pbmRDYWxsT3duZXInLFxuICAgICAgICAnbm90aWZ5R3JvdXAnLFxuICAgIF07XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIEZpbGVBdHRhY2htZW50IHtcbiAgICAgICAgZmlsZU5hbWU6IHN0cmluZztcbiAgICAgICAgZmlsZVNvdXJjZTogc3RyaW5nO1xuICAgICAgICB0aW1lU3RhbXA/OiBEYXRlO1xuICAgICAgICBtaW1lVHlwZT86IHN0cmluZztcbiAgICAgICAgZmlsZVNpemU/OiBudW1iZXI7XG4gICAgICAgIGNvbnRlbnRJZD86IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgbGV0IGZpbGVBdHRhY2htZW50TWFwID0gW1xuICAgICAgICAnZmlsZU5hbWUnLFxuICAgICAgICAnZmlsZVNvdXJjZScsXG4gICAgICAgICd0aW1lU3RhbXAnLFxuICAgICAgICAnbWltZVR5cGUnLFxuICAgICAgICAnZmlsZVNpemUnLFxuICAgICAgICAnY29udGVudElkJyxcbiAgICBdO1xuXG4gICAgZXhwb3J0IGludGVyZmFjZSBLZXlQYWlyIHtcbiAgICAgICAga2V5TmFtZTogc3RyaW5nO1xuICAgICAgICBrZXlWYWx1ZTogc3RyaW5nO1xuICAgIH1cblxuICAgIGV4cG9ydCBsZXQga2V5UGFpck1hcCA9IFtcbiAgICAgICAgJ2tleU5hbWUnLFxuICAgICAgICAna2V5VmFsdWUnXG4gICAgXTtcblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgV29ya0l0ZW1MaXN0IHtcbiAgICAgICAgaWQ6IG51bWJlcixcbiAgICAgICAgdHlwZTogc3RyaW5nLFxuICAgICAgICBuYW1lOiBzdHJpbmcsXG4gICAgICAgIHdvcmtJdGVtSW5mbzogV29ya0l0ZW1JbmZvXG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBXb3JrSXRlbUluZm8ge1xuICAgICAgICBpZDogbnVtYmVyLFxuICAgICAgICBwYXJlbnRHcm91cDogc3RyaW5nLFxuICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICAgICAgICB0aW1lOiBudW1iZXIsXG4gICAgICAgIGFzc2lnblRvR3JvdXA6IHN0cmluZyxcbiAgICAgICAgYXNzaWduVG9BbmFseXN0Pzogc3RyaW5nLFxuICAgICAgICBhY3Rpb25CeTogV29ya0l0ZW1BY3Rpb25CeSxcbiAgICAgICAgcHJpb3JpdHk6IHN0cmluZyxcbiAgICAgICAgdHlwZTogc3RyaW5nLFxuICAgICAgICByZW1pbmRlcj86IG51bWJlcixcbiAgICAgICAgcmVtaW5kQXNzaWduZWU/OiBib29sZWFuLFxuICAgICAgICByZW1pbmRDYWxsT3duZXI/OiBib29sZWFuLFxuICAgICAgICBub3RpZnlHcm91cD86IGJvb2xlYW5cblxuICAgIH1cblxuICAgIGV4cG9ydCBsZXQgd29ya0l0ZW1JbmZvTWFwID0gW1xuICAgICAgICAnaWQnLFxuICAgICAgICAncGFyZW50R3JvdXAnLFxuICAgICAgICAnZGVzY3JpcHRpb24nLFxuICAgICAgICAndGltZScsXG4gICAgICAgICdhc3NpZ25Ub0dyb3VwJyxcbiAgICAgICAgJ2Fzc2lnblRvQW5hbHlzdD8nLFxuICAgICAgICAnYWN0aW9uQnknLFxuICAgICAgICAncHJpb3JpdHknLFxuICAgICAgICAndHlwZScsXG4gICAgICAgICdyZW1pbmRlcj8nLFxuICAgICAgICAncmVtaW5kQXNzaWduZWU/JyxcbiAgICAgICAgJ3JlbWluZENhbGxPd25lcj8nLFxuICAgICAgICAnbm90aWZ5R3JvdXA/J1xuICAgIF07XG5cbiAgICBleHBvcnQgZW51bSBXb3JrSXRlbUFjdGlvbkJ5IHtcbiAgICAgICAgQVNJR05FRSA9IDAsXG4gICAgICAgIEFTSUdORUVfR1JPVVAgPSAxLFxuICAgICAgICBBTlkgPSAzXG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBGaWxlTGlzdCB7XG4gICAgICAgIGZpbGVOYW1lOiBzdHJpbmcsXG4gICAgICAgIGZpbGVTaXplOiBudW1iZXIsXG4gICAgICAgIGZpbGVQYXRoOiBzdHJpbmcsXG4gICAgfVxuXG5cbn1cblxuZXhwb3J0ID0geG1sbWNcbiJdfQ==