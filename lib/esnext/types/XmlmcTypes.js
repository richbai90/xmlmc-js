"use strict";
var xmlmcTypes;
(function (xmlmcTypes) {
    xmlmcTypes.sessionVariableMap = ['name', 'value'];
    xmlmcTypes.userLibraryResourceMap = ['name', 'url'];
    xmlmcTypes.embeddedFileAttachmentMap = ['fileName', 'fileData', 'timeStamp', 'mimeType', 'contentId'];
    xmlmcTypes.newWorkListItemMap = [
        'description',
        'time',
        'assignToGroup',
        'assignToAnalyst',
        'actionBy',
        'priority',
        'type',
        'reminder',
        'remindAssignee',
        'remindCallOwner',
        'notifyGroup',
    ];
    xmlmcTypes.fileAttachmentMap = [
        'fileName',
        'fileSource',
        'timeStamp',
        'mimeType',
        'fileSize',
        'contentId',
    ];
    xmlmcTypes.keyPairMap = [
        'keyName',
        'keyValue'
    ];
    xmlmcTypes.workItemInfoMap = [
        'id',
        'parentGroup',
        'description',
        'time',
        'assignToGroup',
        'assignToAnalyst?',
        'actionBy',
        'priority',
        'type',
        'reminder?',
        'remindAssignee?',
        'remindCallOwner?',
        'notifyGroup?'
    ];
    let WorkItemActionBy;
    (function (WorkItemActionBy) {
        WorkItemActionBy[WorkItemActionBy["ASIGNEE"] = 0] = "ASIGNEE";
        WorkItemActionBy[WorkItemActionBy["ASIGNEE_GROUP"] = 1] = "ASIGNEE_GROUP";
        WorkItemActionBy[WorkItemActionBy["ANY"] = 3] = "ANY";
    })(WorkItemActionBy = xmlmcTypes.WorkItemActionBy || (xmlmcTypes.WorkItemActionBy = {}));
})(xmlmcTypes || (xmlmcTypes = {}));
module.exports = xmlmcTypes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWG1sbWNUeXBlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBlcy9YbWxtY1R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxJQUFPLFVBQVUsQ0F1S2hCO0FBdktELFdBQU8sVUFBVTtJQXVDRiw2QkFBa0IsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQU92QyxpQ0FBc0IsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQVV6QyxvQ0FBeUIsR0FBRyxDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQWdCM0YsNkJBQWtCLEdBQUc7UUFDNUIsYUFBYTtRQUNiLE1BQU07UUFDTixlQUFlO1FBQ2YsaUJBQWlCO1FBQ2pCLFVBQVU7UUFDVixVQUFVO1FBQ1YsTUFBTTtRQUNOLFVBQVU7UUFDVixnQkFBZ0I7UUFDaEIsaUJBQWlCO1FBQ2pCLGFBQWE7S0FDaEIsQ0FBQztJQVdTLDRCQUFpQixHQUFHO1FBQzNCLFVBQVU7UUFDVixZQUFZO1FBQ1osV0FBVztRQUNYLFVBQVU7UUFDVixVQUFVO1FBQ1YsV0FBVztLQUNkLENBQUM7SUFPUyxxQkFBVSxHQUFHO1FBQ3BCLFNBQVM7UUFDVCxVQUFVO0tBQ2IsQ0FBQztJQTBCUywwQkFBZSxHQUFHO1FBQ3pCLElBQUk7UUFDSixhQUFhO1FBQ2IsYUFBYTtRQUNiLE1BQU07UUFDTixlQUFlO1FBQ2Ysa0JBQWtCO1FBQ2xCLFVBQVU7UUFDVixVQUFVO1FBQ1YsTUFBTTtRQUNOLFdBQVc7UUFDWCxpQkFBaUI7UUFDakIsa0JBQWtCO1FBQ2xCLGNBQWM7S0FDakIsQ0FBQztJQUVGLElBQVksZ0JBSVg7SUFKRCxXQUFZLGdCQUFnQjtRQUN4Qiw2REFBVyxDQUFBO1FBQ1gseUVBQWlCLENBQUE7UUFDakIscURBQU8sQ0FBQTtJQUNYLENBQUMsRUFKVyxnQkFBZ0IsR0FBaEIsMkJBQWdCLEtBQWhCLDJCQUFnQixRQUkzQjtBQVNMLENBQUMsRUF2S00sVUFBVSxLQUFWLFVBQVUsUUF1S2hCO0FBRUQsaUJBQVMsVUFBVSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtYTUxFbGVtZW50T3JYTUxOb2RlfSBmcm9tIFwieG1sYnVpbGRlclwiO1xuXG5cbm1vZHVsZSB4bWxtY1R5cGVzIHtcblxuICAgIGV4cG9ydCB0eXBlIFhtbG1jUGFyYW0gPVxuICAgICAgICBzdHJpbmdcbiAgICAgICAgfCBudW1iZXJcbiAgICAgICAgfCBEYXRlXG4gICAgICAgIHwgWG1sbWNQYXJhbXNcbiAgICAgICAgfCBib29sZWFuXG4gICAgICAgIHwgU2Vzc2lvblZhcmlhYmxlXG4gICAgICAgIHwgRW1iZWRkZWRGaWxlQXR0YWNobWVudFxuICAgICAgICB8IE5ld1dvcmtMaXN0SXRlbVxuICAgICAgICB8IEZpbGVBdHRhY2htZW50XG4gICAgICAgIHwgS2V5UGFpclxuICAgICAgICB8IFdvcmtJdGVtTGlzdFxuICAgICAgICB8IFdvcmtJdGVtSW5mb1xuICAgICAgICB8IEZpbGVMaXN0XG4gICAgICAgIHwgVXNlckxpYnJhcnlSZXNvdXJjZUl0ZW1cbiAgICAgICAgfCB1bmRlZmluZWRcblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgWG1sbWNQYXJhbXMge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBYbWxtY1BhcmFtXG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBYbWxtY1JlcXVlc3Qge1xuICAgICAgICBzZXJ2aWNlOiBzdHJpbmc7XG4gICAgICAgIG1ldGhvZDogc3RyaW5nO1xuICAgICAgICBwYXJhbXNOb3RTZXQ6IGJvb2xlYW47XG4gICAgICAgIHhtbG1jOiBYTUxFbGVtZW50T3JYTUxOb2RlO1xuXG4gICAgICAgIF9jcmVhdGVYbWxtYyhwYXJhbXM6IFhtbG1jUGFyYW0sIGVsOiBYTUxFbGVtZW50T3JYTUxOb2RlLCBrZXk6IHN0cmluZyk6IHZvaWRcblxuICAgICAgICB0b1N0cmluZygpOiBzdHJpbmdcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFNlc3Npb25WYXJpYWJsZSB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgdmFsdWU6IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgbGV0IHNlc3Npb25WYXJpYWJsZU1hcCA9IFsnbmFtZScsICd2YWx1ZSddO1xuXG4gICAgZXhwb3J0IGludGVyZmFjZSBVc2VyTGlicmFyeVJlc291cmNlSXRlbSB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgdXJsOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgZXhwb3J0IGxldCB1c2VyTGlicmFyeVJlc291cmNlTWFwID0gWyduYW1lJywgJ3VybCddO1xuXG4gICAgZXhwb3J0IGludGVyZmFjZSBFbWJlZGRlZEZpbGVBdHRhY2htZW50IHtcbiAgICAgICAgZmlsZU5hbWU6IHN0cmluZztcbiAgICAgICAgZmlsZURhdGE6IHN0cmluZztcbiAgICAgICAgdGltZVN0YW1wPzogRGF0ZTtcbiAgICAgICAgbWltZVR5cGU/OiBzdHJpbmc7XG4gICAgICAgIGNvbnRlbnRJZD86IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgbGV0IGVtYmVkZGVkRmlsZUF0dGFjaG1lbnRNYXAgPSBbJ2ZpbGVOYW1lJywgJ2ZpbGVEYXRhJywgJ3RpbWVTdGFtcCcsICdtaW1lVHlwZScsICdjb250ZW50SWQnXTtcblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgTmV3V29ya0xpc3RJdGVtIHtcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgICAgdGltZTogbnVtYmVyO1xuICAgICAgICBhc3NpZ25Ub0dyb3VwOiBzdHJpbmc7XG4gICAgICAgIGFzc2lnblRvQW5hbHlzdD86IHN0cmluZztcbiAgICAgICAgYWN0aW9uQnk6IHN0cmluZztcbiAgICAgICAgcHJpb3JpdHk6IHN0cmluZztcbiAgICAgICAgdHlwZTogc3RyaW5nO1xuICAgICAgICByZW1pbmRlcj86IG51bWJlcjtcbiAgICAgICAgcmVtaW5kQXNzaWduZWU/OiBib29sZWFuO1xuICAgICAgICByZW1pbmRDYWxsT3duZXI/OiBib29sZWFuO1xuICAgICAgICBub3RpZnlHcm91cD86IGJvb2xlYW47XG4gICAgfVxuXG4gICAgZXhwb3J0IGxldCBuZXdXb3JrTGlzdEl0ZW1NYXAgPSBbXG4gICAgICAgICdkZXNjcmlwdGlvbicsXG4gICAgICAgICd0aW1lJyxcbiAgICAgICAgJ2Fzc2lnblRvR3JvdXAnLFxuICAgICAgICAnYXNzaWduVG9BbmFseXN0JyxcbiAgICAgICAgJ2FjdGlvbkJ5JyxcbiAgICAgICAgJ3ByaW9yaXR5JyxcbiAgICAgICAgJ3R5cGUnLFxuICAgICAgICAncmVtaW5kZXInLFxuICAgICAgICAncmVtaW5kQXNzaWduZWUnLFxuICAgICAgICAncmVtaW5kQ2FsbE93bmVyJyxcbiAgICAgICAgJ25vdGlmeUdyb3VwJyxcbiAgICBdO1xuXG4gICAgZXhwb3J0IGludGVyZmFjZSBGaWxlQXR0YWNobWVudCB7XG4gICAgICAgIGZpbGVOYW1lOiBzdHJpbmc7XG4gICAgICAgIGZpbGVTb3VyY2U6IHN0cmluZztcbiAgICAgICAgdGltZVN0YW1wPzogRGF0ZTtcbiAgICAgICAgbWltZVR5cGU/OiBzdHJpbmc7XG4gICAgICAgIGZpbGVTaXplPzogbnVtYmVyO1xuICAgICAgICBjb250ZW50SWQ/OiBzdHJpbmc7XG4gICAgfVxuXG4gICAgZXhwb3J0IGxldCBmaWxlQXR0YWNobWVudE1hcCA9IFtcbiAgICAgICAgJ2ZpbGVOYW1lJyxcbiAgICAgICAgJ2ZpbGVTb3VyY2UnLFxuICAgICAgICAndGltZVN0YW1wJyxcbiAgICAgICAgJ21pbWVUeXBlJyxcbiAgICAgICAgJ2ZpbGVTaXplJyxcbiAgICAgICAgJ2NvbnRlbnRJZCcsXG4gICAgXTtcblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgS2V5UGFpciB7XG4gICAgICAgIGtleU5hbWU6IHN0cmluZztcbiAgICAgICAga2V5VmFsdWU6IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgbGV0IGtleVBhaXJNYXAgPSBbXG4gICAgICAgICdrZXlOYW1lJyxcbiAgICAgICAgJ2tleVZhbHVlJ1xuICAgIF07XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFdvcmtJdGVtTGlzdCB7XG4gICAgICAgIGlkOiBudW1iZXIsXG4gICAgICAgIHR5cGU6IHN0cmluZyxcbiAgICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgICB3b3JrSXRlbUluZm86IFdvcmtJdGVtSW5mb1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgV29ya0l0ZW1JbmZvIHtcbiAgICAgICAgaWQ6IG51bWJlcixcbiAgICAgICAgcGFyZW50R3JvdXA6IHN0cmluZyxcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICAgICAgdGltZTogbnVtYmVyLFxuICAgICAgICBhc3NpZ25Ub0dyb3VwOiBzdHJpbmcsXG4gICAgICAgIGFzc2lnblRvQW5hbHlzdD86IHN0cmluZyxcbiAgICAgICAgYWN0aW9uQnk6IFdvcmtJdGVtQWN0aW9uQnksXG4gICAgICAgIHByaW9yaXR5OiBzdHJpbmcsXG4gICAgICAgIHR5cGU6IHN0cmluZyxcbiAgICAgICAgcmVtaW5kZXI/OiBudW1iZXIsXG4gICAgICAgIHJlbWluZEFzc2lnbmVlPzogYm9vbGVhbixcbiAgICAgICAgcmVtaW5kQ2FsbE93bmVyPzogYm9vbGVhbixcbiAgICAgICAgbm90aWZ5R3JvdXA/OiBib29sZWFuXG5cbiAgICB9XG5cbiAgICBleHBvcnQgbGV0IHdvcmtJdGVtSW5mb01hcCA9IFtcbiAgICAgICAgJ2lkJyxcbiAgICAgICAgJ3BhcmVudEdyb3VwJyxcbiAgICAgICAgJ2Rlc2NyaXB0aW9uJyxcbiAgICAgICAgJ3RpbWUnLFxuICAgICAgICAnYXNzaWduVG9Hcm91cCcsXG4gICAgICAgICdhc3NpZ25Ub0FuYWx5c3Q/JyxcbiAgICAgICAgJ2FjdGlvbkJ5JyxcbiAgICAgICAgJ3ByaW9yaXR5JyxcbiAgICAgICAgJ3R5cGUnLFxuICAgICAgICAncmVtaW5kZXI/JyxcbiAgICAgICAgJ3JlbWluZEFzc2lnbmVlPycsXG4gICAgICAgICdyZW1pbmRDYWxsT3duZXI/JyxcbiAgICAgICAgJ25vdGlmeUdyb3VwPydcbiAgICBdO1xuXG4gICAgZXhwb3J0IGVudW0gV29ya0l0ZW1BY3Rpb25CeSB7XG4gICAgICAgIEFTSUdORUUgPSAwLFxuICAgICAgICBBU0lHTkVFX0dST1VQID0gMSxcbiAgICAgICAgQU5ZID0gM1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZUxpc3Qge1xuICAgICAgICBmaWxlTmFtZTogc3RyaW5nLFxuICAgICAgICBmaWxlU2l6ZTogbnVtYmVyLFxuICAgICAgICBmaWxlUGF0aDogc3RyaW5nLFxuICAgIH1cblxuXG59XG5cbmV4cG9ydCA9IHhtbG1jVHlwZXNcbiJdfQ==