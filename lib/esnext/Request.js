"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const xmlbuilder_1 = require("xmlbuilder");
class Request {
    constructor(service, method, params = {}, paramMap) {
        this.service = service;
        this.method = method;
        this.xmlmc = xmlbuilder_1.create('methodCall').att('service', service).att('method', method);
        this.paramsNotSet = true;
        if (params) {
            this.addParams(params, paramMap);
        }
    }
    _createXmlmc(params, el = this.xmlmc, key = 'params') {
        if (typeof el === 'string') {
            key = el;
        }
        if (el === this.xmlmc && this.paramsNotSet) {
            el = el.ele(key);
            this.paramsNotSet = false;
        }
        const paramKeys = Object.keys(params);
        paramKeys.forEach((p) => {
            let param = params[p];
            if (param === undefined) {
                return;
            }
            if (Object.getPrototypeOf(param) === Object.prototype) {
                el = el.ele(p);
                this._createXmlmc(params[p], el);
            }
            else {
                el.ele(p, param.toString());
            }
        });
    }
    /**
     * Add a simple / complex param
     * @param {Params} param
     * @param {string} value
     */
    addParam(param, value) {
        const params = {};
        params[param] = value;
        this._createXmlmc(params);
    }
    /**
     * Add all the params at once
     * @param {Params} params
     * @param paramMap
     */
    addParams(params, paramMap) {
        let orderedParams = {};
        // ensure that all the params are in the proper order
        paramMap.forEach((v) => {
            if (params.hasOwnProperty(v)) {
                orderedParams[v] = params[v];
            }
        });
        this._createXmlmc(orderedParams);
    }
    toString() {
        return this.xmlmc.toString();
    }
}
exports.Request = Request;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9SZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQXVEO0FBR3ZEO0lBT0ksWUFBWSxPQUFlLEVBQUUsTUFBYyxFQUFFLFNBQXNCLEVBQUUsRUFBRSxRQUF1QjtRQUMxRixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLG1CQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBRXpCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDVCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNyQyxDQUFDO0lBQ0wsQ0FBQztJQUdELFlBQVksQ0FBQyxNQUFtQixFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsR0FBRyxRQUFRO1FBQzdELEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDekIsR0FBRyxHQUFXLEVBQUUsQ0FBQztRQUNyQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDekMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDOUIsQ0FBQztRQUNELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQVMsRUFBRSxFQUFFO1lBQzVCLElBQUksS0FBSyxHQUFlLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDdEIsTUFBTSxDQUFDO1lBQ1gsQ0FBQztZQUNELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BELEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNmLElBQUksQ0FBQyxZQUFZLENBQWMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2xELENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUNoQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBR0Q7Ozs7T0FJRztJQUNILFFBQVEsQ0FBQyxLQUFhLEVBQUUsS0FBaUI7UUFDckMsTUFBTSxNQUFNLEdBQWdCLEVBQUUsQ0FBQztRQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxTQUFTLENBQUMsTUFBbUIsRUFBRSxRQUF1QjtRQUNsRCxJQUFJLGFBQWEsR0FBZ0IsRUFBRSxDQUFDO1FBQ3BDLHFEQUFxRDtRQUNyRCxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDbkIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsUUFBUTtRQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pDLENBQUM7Q0FFSjtBQTFFRCwwQkEwRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NyZWF0ZSwgWE1MRWxlbWVudE9yWE1MTm9kZX0gZnJvbSAneG1sYnVpbGRlcic7XG5pbXBvcnQge1htbG1jUGFyYW0sIFhtbG1jUGFyYW1zLCBYbWxtY1JlcXVlc3R9IGZyb20gJy4vdHlwZXMvWG1sbWNUeXBlcydcblxuZXhwb3J0IGNsYXNzIFJlcXVlc3QgaW1wbGVtZW50cyBYbWxtY1JlcXVlc3Qge1xuXG4gICAgc2VydmljZTogc3RyaW5nO1xuICAgIG1ldGhvZDogc3RyaW5nO1xuICAgIHBhcmFtc05vdFNldDogYm9vbGVhbjtcbiAgICB4bWxtYzogWE1MRWxlbWVudE9yWE1MTm9kZTtcblxuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2U6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcsIHBhcmFtczogWG1sbWNQYXJhbXMgPSB7fSwgcGFyYW1NYXA6IEFycmF5PHN0cmluZz4pIHtcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgIHRoaXMueG1sbWMgPSBjcmVhdGUoJ21ldGhvZENhbGwnKS5hdHQoJ3NlcnZpY2UnLCBzZXJ2aWNlKS5hdHQoJ21ldGhvZCcsIG1ldGhvZCk7XG4gICAgICAgIHRoaXMucGFyYW1zTm90U2V0ID0gdHJ1ZTtcblxuICAgICAgICBpZiAocGFyYW1zKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFBhcmFtcyhwYXJhbXMsIHBhcmFtTWFwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgX2NyZWF0ZVhtbG1jKHBhcmFtczogWG1sbWNQYXJhbXMsIGVsID0gdGhpcy54bWxtYywga2V5ID0gJ3BhcmFtcycpOiB2b2lkIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGtleSA9IDxzdHJpbmc+ZWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsID09PSB0aGlzLnhtbG1jICYmIHRoaXMucGFyYW1zTm90U2V0KSB7XG4gICAgICAgICAgICBlbCA9IGVsLmVsZShrZXkpO1xuICAgICAgICAgICAgdGhpcy5wYXJhbXNOb3RTZXQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJhbUtleXMgPSBPYmplY3Qua2V5cyhwYXJhbXMpO1xuICAgICAgICBwYXJhbUtleXMuZm9yRWFjaCgocDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBsZXQgcGFyYW06IFhtbG1jUGFyYW0gPSBwYXJhbXNbcF07XG4gICAgICAgICAgICBpZiAocGFyYW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocGFyYW0pID09PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgZWwgPSBlbC5lbGUocCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlWG1sbWMoPFhtbG1jUGFyYW1zPnBhcmFtc1twXSwgZWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbC5lbGUocCwgcGFyYW0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBzaW1wbGUgLyBjb21wbGV4IHBhcmFtXG4gICAgICogQHBhcmFtIHtQYXJhbXN9IHBhcmFtXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAgICovXG4gICAgYWRkUGFyYW0ocGFyYW06IHN0cmluZywgdmFsdWU6IFhtbG1jUGFyYW0pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcGFyYW1zOiBYbWxtY1BhcmFtcyA9IHt9O1xuICAgICAgICBwYXJhbXNbcGFyYW1dID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2NyZWF0ZVhtbG1jKHBhcmFtcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGFsbCB0aGUgcGFyYW1zIGF0IG9uY2VcbiAgICAgKiBAcGFyYW0ge1BhcmFtc30gcGFyYW1zXG4gICAgICogQHBhcmFtIHBhcmFtTWFwXG4gICAgICovXG4gICAgYWRkUGFyYW1zKHBhcmFtczogWG1sbWNQYXJhbXMsIHBhcmFtTWFwOiBBcnJheTxzdHJpbmc+KTogdm9pZCB7XG4gICAgICAgIGxldCBvcmRlcmVkUGFyYW1zOiBYbWxtY1BhcmFtcyA9IHt9O1xuICAgICAgICAvLyBlbnN1cmUgdGhhdCBhbGwgdGhlIHBhcmFtcyBhcmUgaW4gdGhlIHByb3BlciBvcmRlclxuICAgICAgICBwYXJhbU1hcC5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICAgICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KHYpKSB7XG4gICAgICAgICAgICAgICAgb3JkZXJlZFBhcmFtc1t2XSA9IHBhcmFtc1t2XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2NyZWF0ZVhtbG1jKG9yZGVyZWRQYXJhbXMpO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnhtbG1jLnRvU3RyaW5nKCk7XG4gICAgfVxuXG59XG5cblxuIl19