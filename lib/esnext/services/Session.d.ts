import * as paramTypes from '../types/SessionTypes';
import { AxiosError } from "axios";
import { Connection, XmlmcResponse } from '../Connection';
import Xmlmc from '../XmlMethodCall';
export declare class Session {
    private connection;
    private xmlmc;
    private service;
    private paramMap;
    constructor(connection: Connection, xmlmc: Xmlmc);
    analystLogoff(optionalParams?: paramTypes.analystLogoffParams): Promise<XmlmcResponse | AxiosError>;
    analystLogon(userId: string, password: string, optionalParams?: paramTypes.analystLogonParams): Promise<XmlmcResponse | AxiosError>;
    analystLogonTrust(userId: string, secretKey: string, optionalParams?: paramTypes.analystLogonTrustParams): Promise<XmlmcResponse | AxiosError>;
    bindSession(sessionId: string, optionalParams?: paramTypes.bindSessionParams): Promise<XmlmcResponse | AxiosError>;
    changePassword(oldPassword: string, newPassword: string, optionalParams?: paramTypes.changePasswordParams): Promise<XmlmcResponse | AxiosError>;
    closeLocalSession(optionalParams?: paramTypes.closeLocalSessionParams): Promise<XmlmcResponse | AxiosError>;
    convertDateTimeInText(inputText: string, optionalParams?: paramTypes.convertDateTimeInTextParams): Promise<XmlmcResponse | AxiosError>;
    createLocalSession(optionalParams?: paramTypes.createLocalSessionParams): Promise<XmlmcResponse | AxiosError>;
    getSessionDDInfo(optionalParams?: paramTypes.getSessionDDInfoParams): Promise<XmlmcResponse | AxiosError>;
    getSessionInfo(optionalParams?: paramTypes.getSessionInfoParams): Promise<XmlmcResponse | AxiosError>;
    getSessionInfo2(optionalParams?: paramTypes.getSessionInfo2Params): Promise<XmlmcResponse | AxiosError>;
    hasRight(userRight: string, optionalParams?: paramTypes.hasRightParams): Promise<XmlmcResponse | AxiosError>;
    isSessionValid(optionalParams?: paramTypes.isSessionValidParams): Promise<XmlmcResponse | AxiosError>;
    lockCustomerAccount(selfServiceInstance: string, customerId: string, permanent: boolean, optionalParams?: paramTypes.lockCustomerAccountParams): Promise<XmlmcResponse | AxiosError>;
    selfServiceLogoff(optionalParams?: paramTypes.selfServiceLogoffParams): Promise<XmlmcResponse | AxiosError>;
    selfServiceLogon(selfServiceInstance: string, customerId: string, password: string, optionalParams?: paramTypes.selfServiceLogonParams): Promise<XmlmcResponse | AxiosError>;
    setDatabaseRight(tableName: string, rightFlag: number, rightAllowed: boolean, optionalParams?: paramTypes.setDatabaseRightParams): Promise<XmlmcResponse | AxiosError>;
    setOutputValidation(validateResultMessage: boolean, optionalParams?: paramTypes.setOutputValidationParams): Promise<XmlmcResponse | AxiosError>;
    setUserRight(rightClass: string, rightFlag: number, rightAllowed: boolean, optionalParams?: paramTypes.setUserRightParams): Promise<XmlmcResponse | AxiosError>;
    setVariable(sessionVariable: Object, optionalParams?: paramTypes.setVariableParams): Promise<XmlmcResponse | AxiosError>;
    switchAnalystContext(groupId: string, optionalParams?: paramTypes.switchAnalystContextParams): Promise<XmlmcResponse | AxiosError>;
    unlockCustomerAccount(selfServiceInstance: string, customerId: string, optionalParams?: paramTypes.unlockCustomerAccountParams): Promise<XmlmcResponse | AxiosError>;
}
