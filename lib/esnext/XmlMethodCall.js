"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Connection_1 = require("./Connection");
const Session_1 = require("./services/Session");
const Data_1 = require("./services/Data");
const Admin_1 = require("./services/Admin");
const Helpdesk_1 = require("./services/Helpdesk");
const Knowledgebase_1 = require("./services/Knowledgebase");
const Mylibrary_1 = require("./services/Mylibrary");
const Reporting_1 = require("./services/Reporting");
const Selfservice_1 = require("./services/Selfservice");
const Survey_1 = require("./services/Survey");
const System_1 = require("./services/System");
class XmlMethodCall {
    constructor(server = 'localhost', port, opts) {
        if (server.match(/^(http:\/\/)/)) {
            port = 80;
        }
        else {
            port = server.match(/^(https:\/\/)/) ? 443 : port || 5015;
        }
        const defaultOpts = {
            data: {
                formatValues: true
            }
        };
        this.connection = new Connection_1.Connection(server, port);
        this.session = new Session_1.Session(this.connection, this);
        this.data = new Data_1.Data(this.connection, this);
        this.admin = new Admin_1.Admin(this.connection, this);
        this.helpdesk = new Helpdesk_1.Helpdesk(this.connection, this);
        this.knowledgebase = new Knowledgebase_1.Knowledgebase(this.connection, this);
        this.myLibrary = new Mylibrary_1.Mylibrary(this.connection, this);
        this.reporting = new Reporting_1.Reporting(this.connection, this);
        this.selfservice = new Selfservice_1.Selfservice(this.connection, this);
        this.survey = new Survey_1.Survey(this.connection, this);
        this.system = new System_1.System(this.connection, this);
        this.opts = Object.assign({}, defaultOpts, opts);
    }
}
exports.default = XmlMethodCall;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWG1sTWV0aG9kQ2FsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9YbWxNZXRob2RDYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXdDO0FBQ3hDLGdEQUEyQztBQUMzQywwQ0FBcUM7QUFDckMsNENBQXVDO0FBQ3ZDLGtEQUE2QztBQUM3Qyw0REFBdUQ7QUFDdkQsb0RBQStDO0FBQy9DLG9EQUErQztBQUMvQyx3REFBbUQ7QUFDbkQsOENBQXlDO0FBQ3pDLDhDQUF5QztBQWF6QztJQWNJLFlBQVksU0FBaUIsV0FBVyxFQUFFLElBQWEsRUFBRSxJQUFtQjtRQUN4RSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixJQUFJLEdBQUcsRUFBRSxDQUFBO1FBQ2IsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQztRQUM5RCxDQUFDO1FBRUQsTUFBTSxXQUFXLEdBQWlCO1lBQzlCLElBQUksRUFBRTtnQkFDRixZQUFZLEVBQUUsSUFBSTthQUNyQjtTQUNKLENBQUM7UUFFRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksdUJBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksV0FBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGFBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLDZCQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUkscUJBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxxQkFBUyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLHlCQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FHSjtBQTFDRCxnQ0EwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Nvbm5lY3Rpb259IGZyb20gXCIuL0Nvbm5lY3Rpb25cIjtcbmltcG9ydCB7U2Vzc2lvbn0gZnJvbSBcIi4vc2VydmljZXMvU2Vzc2lvblwiO1xuaW1wb3J0IHtEYXRhfSBmcm9tIFwiLi9zZXJ2aWNlcy9EYXRhXCI7XG5pbXBvcnQge0FkbWlufSBmcm9tIFwiLi9zZXJ2aWNlcy9BZG1pblwiO1xuaW1wb3J0IHtIZWxwZGVza30gZnJvbSBcIi4vc2VydmljZXMvSGVscGRlc2tcIjtcbmltcG9ydCB7S25vd2xlZGdlYmFzZX0gZnJvbSBcIi4vc2VydmljZXMvS25vd2xlZGdlYmFzZVwiO1xuaW1wb3J0IHtNeWxpYnJhcnl9IGZyb20gXCIuL3NlcnZpY2VzL015bGlicmFyeVwiO1xuaW1wb3J0IHtSZXBvcnRpbmd9IGZyb20gXCIuL3NlcnZpY2VzL1JlcG9ydGluZ1wiO1xuaW1wb3J0IHtTZWxmc2VydmljZX0gZnJvbSBcIi4vc2VydmljZXMvU2VsZnNlcnZpY2VcIjtcbmltcG9ydCB7U3VydmV5fSBmcm9tIFwiLi9zZXJ2aWNlcy9TdXJ2ZXlcIjtcbmltcG9ydCB7U3lzdGVtfSBmcm9tIFwiLi9zZXJ2aWNlcy9TeXN0ZW1cIjtcblxuZXhwb3J0IHR5cGUgWG1sbWNPcHRpb25zID0ge1xuICAgIGRhdGE/OiB7XG4gICAgICAgIGZvcm1hdFZhbHVlcz86IGJvb2xlYW4sXG4gICAgICAgIHJldHVybk1ldGE/OiBib29sZWFuLFxuICAgICAgICByYXdEYXRhPzogYm9vbGVhbixcbiAgICAgICAgcmV0dXJuTW9kaWZpZWREYXRhPzogYm9vbGVhbixcbiAgICB9LFxuXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWG1sTWV0aG9kQ2FsbCB7XG4gICAgcHJvdGVjdGVkIGNvbm5lY3Rpb246IENvbm5lY3Rpb247XG4gICAgb3B0czogWG1sbWNPcHRpb25zO1xuICAgIHNlc3Npb246IFNlc3Npb247XG4gICAgZGF0YTogRGF0YTtcbiAgICBhZG1pbjogQWRtaW47XG4gICAgaGVscGRlc2s6IEhlbHBkZXNrO1xuICAgIGtub3dsZWRnZWJhc2U6IEtub3dsZWRnZWJhc2U7XG4gICAgbXlMaWJyYXJ5OiBNeWxpYnJhcnk7XG4gICAgcmVwb3J0aW5nOiBSZXBvcnRpbmc7XG4gICAgc2VsZnNlcnZpY2U6IFNlbGZzZXJ2aWNlO1xuICAgIHN1cnZleTogU3VydmV5O1xuICAgIHN5c3RlbTogU3lzdGVtO1xuXG4gICAgY29uc3RydWN0b3Ioc2VydmVyOiBzdHJpbmcgPSAnbG9jYWxob3N0JywgcG9ydD86IG51bWJlciwgb3B0cz86IFhtbG1jT3B0aW9ucykge1xuICAgICAgICBpZiAoc2VydmVyLm1hdGNoKC9eKGh0dHA6XFwvXFwvKS8pKSB7XG4gICAgICAgICAgICBwb3J0ID0gODBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvcnQgPSBzZXJ2ZXIubWF0Y2goL14oaHR0cHM6XFwvXFwvKS8pID8gNDQzIDogcG9ydCB8fCA1MDE1O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdHM6IFhtbG1jT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZXM6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBuZXcgQ29ubmVjdGlvbihzZXJ2ZXIsIHBvcnQpO1xuICAgICAgICB0aGlzLnNlc3Npb24gPSBuZXcgU2Vzc2lvbih0aGlzLmNvbm5lY3Rpb24sIHRoaXMpO1xuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgRGF0YSh0aGlzLmNvbm5lY3Rpb24sIHRoaXMpO1xuICAgICAgICB0aGlzLmFkbWluID0gbmV3IEFkbWluKHRoaXMuY29ubmVjdGlvbiwgdGhpcyk7XG4gICAgICAgIHRoaXMuaGVscGRlc2sgPSBuZXcgSGVscGRlc2sodGhpcy5jb25uZWN0aW9uLCB0aGlzKTtcbiAgICAgICAgdGhpcy5rbm93bGVkZ2ViYXNlID0gbmV3IEtub3dsZWRnZWJhc2UodGhpcy5jb25uZWN0aW9uLCB0aGlzKTtcbiAgICAgICAgdGhpcy5teUxpYnJhcnkgPSBuZXcgTXlsaWJyYXJ5KHRoaXMuY29ubmVjdGlvbiwgdGhpcyk7XG4gICAgICAgIHRoaXMucmVwb3J0aW5nID0gbmV3IFJlcG9ydGluZyh0aGlzLmNvbm5lY3Rpb24sIHRoaXMpO1xuICAgICAgICB0aGlzLnNlbGZzZXJ2aWNlID0gbmV3IFNlbGZzZXJ2aWNlKHRoaXMuY29ubmVjdGlvbiwgdGhpcyk7XG4gICAgICAgIHRoaXMuc3VydmV5ID0gbmV3IFN1cnZleSh0aGlzLmNvbm5lY3Rpb24sIHRoaXMpO1xuICAgICAgICB0aGlzLnN5c3RlbSA9IG5ldyBTeXN0ZW0odGhpcy5jb25uZWN0aW9uLCB0aGlzKTtcbiAgICAgICAgdGhpcy5vcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdHMsIG9wdHMpO1xuICAgIH1cblxuXG59XG4iXX0=