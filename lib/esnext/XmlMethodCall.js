"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Connection_1 = require("./Connection");
const Session_1 = require("./services/Session");
const Data_1 = require("./services/Data");
const Admin_1 = require("./services/Admin");
const Helpdesk_1 = require("./services/Helpdesk");
const Knowledgebase_1 = require("./services/Knowledgebase");
const Mylibrary_1 = require("./services/Mylibrary");
const Reporting_1 = require("./services/Reporting");
const Selfservice_1 = require("./services/Selfservice");
const Survey_1 = require("./services/Survey");
const System_1 = require("./services/System");
const URL = require("url-parse");
class XmlMethodCall {
    constructor(server = 'localhost', port, opts) {
        if (server.match(/^(http:\/\/)/)) {
            server = URL(server).host;
            port = 80;
        }
        else {
            port = server.match(/^(https:\/\/)/) ? 443 : port || 5015;
            server = port === 443 ? URL(server).host : server;
        }
        const defaultOpts = {
            data: {
                formatValues: true
            }
        };
        this.connection = new Connection_1.Connection(server, port);
        this.session = new Session_1.Session(this.connection, this);
        this.data = new Data_1.Data(this.connection, this);
        this.admin = new Admin_1.Admin(this.connection, this);
        this.helpdesk = new Helpdesk_1.Helpdesk(this.connection, this);
        this.knowledgebase = new Knowledgebase_1.Knowledgebase(this.connection, this);
        this.myLibrary = new Mylibrary_1.Mylibrary(this.connection, this);
        this.reporting = new Reporting_1.Reporting(this.connection, this);
        this.selfservice = new Selfservice_1.Selfservice(this.connection, this);
        this.survey = new Survey_1.Survey(this.connection, this);
        this.system = new System_1.System(this.connection, this);
        this.opts = Object.assign({}, defaultOpts, opts);
    }
}
exports.default = XmlMethodCall;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWG1sTWV0aG9kQ2FsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9YbWxNZXRob2RDYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXdDO0FBQ3hDLGdEQUEyQztBQUMzQywwQ0FBcUM7QUFDckMsNENBQXVDO0FBQ3ZDLGtEQUE2QztBQUM3Qyw0REFBdUQ7QUFDdkQsb0RBQStDO0FBQy9DLG9EQUErQztBQUMvQyx3REFBbUQ7QUFDbkQsOENBQXlDO0FBQ3pDLDhDQUF5QztBQUN6QyxpQ0FBaUM7QUFhakM7SUFjSSxZQUFZLFNBQWlCLFdBQVcsRUFBRSxJQUFhLEVBQUUsSUFBbUI7UUFDeEUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUNiLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7WUFDMUQsTUFBTSxHQUFHLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUN0RCxDQUFDO1FBRUQsTUFBTSxXQUFXLEdBQWlCO1lBQzlCLElBQUksRUFBRTtnQkFDRixZQUFZLEVBQUUsSUFBSTthQUNyQjtTQUNKLENBQUM7UUFFRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksdUJBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksV0FBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGFBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLDZCQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUkscUJBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxxQkFBUyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLHlCQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FHSjtBQTVDRCxnQ0E0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Nvbm5lY3Rpb259IGZyb20gXCIuL0Nvbm5lY3Rpb25cIjtcbmltcG9ydCB7U2Vzc2lvbn0gZnJvbSBcIi4vc2VydmljZXMvU2Vzc2lvblwiO1xuaW1wb3J0IHtEYXRhfSBmcm9tIFwiLi9zZXJ2aWNlcy9EYXRhXCI7XG5pbXBvcnQge0FkbWlufSBmcm9tIFwiLi9zZXJ2aWNlcy9BZG1pblwiO1xuaW1wb3J0IHtIZWxwZGVza30gZnJvbSBcIi4vc2VydmljZXMvSGVscGRlc2tcIjtcbmltcG9ydCB7S25vd2xlZGdlYmFzZX0gZnJvbSBcIi4vc2VydmljZXMvS25vd2xlZGdlYmFzZVwiO1xuaW1wb3J0IHtNeWxpYnJhcnl9IGZyb20gXCIuL3NlcnZpY2VzL015bGlicmFyeVwiO1xuaW1wb3J0IHtSZXBvcnRpbmd9IGZyb20gXCIuL3NlcnZpY2VzL1JlcG9ydGluZ1wiO1xuaW1wb3J0IHtTZWxmc2VydmljZX0gZnJvbSBcIi4vc2VydmljZXMvU2VsZnNlcnZpY2VcIjtcbmltcG9ydCB7U3VydmV5fSBmcm9tIFwiLi9zZXJ2aWNlcy9TdXJ2ZXlcIjtcbmltcG9ydCB7U3lzdGVtfSBmcm9tIFwiLi9zZXJ2aWNlcy9TeXN0ZW1cIjtcbmltcG9ydCBVUkwgPSByZXF1aXJlKCd1cmwtcGFyc2UnKVxuXG5leHBvcnQgdHlwZSBYbWxtY09wdGlvbnMgPSB7XG4gICAgZGF0YT86IHtcbiAgICAgICAgZm9ybWF0VmFsdWVzPzogYm9vbGVhbixcbiAgICAgICAgcmV0dXJuTWV0YT86IGJvb2xlYW4sXG4gICAgICAgIHJhd0RhdGE/OiBib29sZWFuLFxuICAgICAgICByZXR1cm5Nb2RpZmllZERhdGE/OiBib29sZWFuLFxuICAgIH0sXG5cblxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYbWxNZXRob2RDYWxsIHtcbiAgICBwcm90ZWN0ZWQgY29ubmVjdGlvbjogQ29ubmVjdGlvbjtcbiAgICBvcHRzOiBYbWxtY09wdGlvbnM7XG4gICAgc2Vzc2lvbjogU2Vzc2lvbjtcbiAgICBkYXRhOiBEYXRhO1xuICAgIGFkbWluOiBBZG1pbjtcbiAgICBoZWxwZGVzazogSGVscGRlc2s7XG4gICAga25vd2xlZGdlYmFzZTogS25vd2xlZGdlYmFzZTtcbiAgICBteUxpYnJhcnk6IE15bGlicmFyeTtcbiAgICByZXBvcnRpbmc6IFJlcG9ydGluZztcbiAgICBzZWxmc2VydmljZTogU2VsZnNlcnZpY2U7XG4gICAgc3VydmV5OiBTdXJ2ZXk7XG4gICAgc3lzdGVtOiBTeXN0ZW07XG5cbiAgICBjb25zdHJ1Y3RvcihzZXJ2ZXI6IHN0cmluZyA9ICdsb2NhbGhvc3QnLCBwb3J0PzogbnVtYmVyLCBvcHRzPzogWG1sbWNPcHRpb25zKSB7XG4gICAgICAgIGlmIChzZXJ2ZXIubWF0Y2goL14oaHR0cDpcXC9cXC8pLykpIHtcbiAgICAgICAgICAgIHNlcnZlciA9IFVSTChzZXJ2ZXIpLmhvc3Q7XG4gICAgICAgICAgICBwb3J0ID0gODBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvcnQgPSBzZXJ2ZXIubWF0Y2goL14oaHR0cHM6XFwvXFwvKS8pID8gNDQzIDogcG9ydCB8fCA1MDE1O1xuICAgICAgICAgICAgc2VydmVyID0gcG9ydCA9PT0gNDQzID8gVVJMKHNlcnZlcikuaG9zdCA6IHNlcnZlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRPcHRzOiBYbWxtY09wdGlvbnMgPSB7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgZm9ybWF0VmFsdWVzOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbmV3IENvbm5lY3Rpb24oc2VydmVyLCBwb3J0KTtcbiAgICAgICAgdGhpcy5zZXNzaW9uID0gbmV3IFNlc3Npb24odGhpcy5jb25uZWN0aW9uLCB0aGlzKTtcbiAgICAgICAgdGhpcy5kYXRhID0gbmV3IERhdGEodGhpcy5jb25uZWN0aW9uLCB0aGlzKTtcbiAgICAgICAgdGhpcy5hZG1pbiA9IG5ldyBBZG1pbih0aGlzLmNvbm5lY3Rpb24sIHRoaXMpO1xuICAgICAgICB0aGlzLmhlbHBkZXNrID0gbmV3IEhlbHBkZXNrKHRoaXMuY29ubmVjdGlvbiwgdGhpcyk7XG4gICAgICAgIHRoaXMua25vd2xlZGdlYmFzZSA9IG5ldyBLbm93bGVkZ2ViYXNlKHRoaXMuY29ubmVjdGlvbiwgdGhpcyk7XG4gICAgICAgIHRoaXMubXlMaWJyYXJ5ID0gbmV3IE15bGlicmFyeSh0aGlzLmNvbm5lY3Rpb24sIHRoaXMpO1xuICAgICAgICB0aGlzLnJlcG9ydGluZyA9IG5ldyBSZXBvcnRpbmcodGhpcy5jb25uZWN0aW9uLCB0aGlzKTtcbiAgICAgICAgdGhpcy5zZWxmc2VydmljZSA9IG5ldyBTZWxmc2VydmljZSh0aGlzLmNvbm5lY3Rpb24sIHRoaXMpO1xuICAgICAgICB0aGlzLnN1cnZleSA9IG5ldyBTdXJ2ZXkodGhpcy5jb25uZWN0aW9uLCB0aGlzKTtcbiAgICAgICAgdGhpcy5zeXN0ZW0gPSBuZXcgU3lzdGVtKHRoaXMuY29ubmVjdGlvbiwgdGhpcyk7XG4gICAgICAgIHRoaXMub3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRzLCBvcHRzKTtcbiAgICB9XG5cblxufVxuIl19