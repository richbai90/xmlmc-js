import * as paramTypes from '../types/KnowledgebaseTypes';
import { AxiosError, AxiosResponse } from "axios";
import { Connection } from '../Connection';
import Xmlmc from '../XmlMethodCall';
export declare class Knowledgebase {
    private connection;
    private xmlmc;
    private service;
    private paramMap;
    constructor(connection: Connection, xmlmc: Xmlmc);
    articleAdd(title: string, docVisibleToCustomers: boolean, docStatus: Object, catalogId: Object, optionalParams?: paramTypes.articleAddParams): Promise<AxiosResponse | AxiosError>;
    articleDelete(docRef: string, optionalParams?: paramTypes.articleDeleteParams): Promise<AxiosResponse | AxiosError>;
    articleUpdate(docRef: string, optionalParams?: paramTypes.articleUpdateParams): Promise<AxiosResponse | AxiosError>;
    catalogAdd(name: string, optionalParams?: paramTypes.catalogAddParams): Promise<AxiosResponse | AxiosError>;
    catalogDelete(catalogId: number, optionalParams?: paramTypes.catalogDeleteParams): Promise<AxiosResponse | AxiosError>;
    catalogList(optionalParams?: paramTypes.catalogListParams): Promise<AxiosResponse | AxiosError>;
    catalogRename(catalogId: number, newName: string, optionalParams?: paramTypes.catalogRenameParams): Promise<AxiosResponse | AxiosError>;
    documentAdd(title: string, docVisibleToCustomers: boolean, docStatus: number, catalogId: number, document: Object, optionalParams?: paramTypes.documentAddParams): Promise<AxiosResponse | AxiosError>;
    documentAddChange(docRef: string, date: Date, optionalParams?: paramTypes.documentAddChangeParams): Promise<AxiosResponse | AxiosError>;
    documentClearChanges(docRef: string, optionalParams?: paramTypes.documentClearChangesParams): Promise<AxiosResponse | AxiosError>;
    documentDelete(docRef: string, optionalParams?: paramTypes.documentDeleteParams): Promise<AxiosResponse | AxiosError>;
    documentFlagForModification(docRef: string, optionalParams?: paramTypes.documentFlagForModificationParams): Promise<AxiosResponse | AxiosError>;
    documentGetCallref(docRef: string, optionalParams?: paramTypes.documentGetCallrefParams): Promise<AxiosResponse | AxiosError>;
    documentGetChanges(docRef: string, optionalParams?: paramTypes.documentGetChangesParams): Promise<AxiosResponse | AxiosError>;
    documentGetInfo(docRef: string, optionalParams?: paramTypes.documentGetInfoParams): Promise<AxiosResponse | AxiosError>;
    documentGetRelated(docRef: string, optionalParams?: paramTypes.documentGetRelatedParams): Promise<AxiosResponse | AxiosError>;
    documentGetSurveyAverageUsefulness(docRef: string, optionalParams?: paramTypes.documentGetSurveyAverageUsefulnessParams): Promise<AxiosResponse | AxiosError>;
    documentGetType(docRef: string, optionalParams?: paramTypes.documentGetTypeParams): Promise<AxiosResponse | AxiosError>;
    documentGetUrl(docRef: string, optionalParams?: paramTypes.documentGetUrlParams): Promise<AxiosResponse | AxiosError>;
    documentIncreaseAccessCounter(docRef: string, optionalParams?: paramTypes.documentIncreaseAccessCounterParams): Promise<AxiosResponse | AxiosError>;
    documentList(optionalParams?: paramTypes.documentListParams): Promise<AxiosResponse | AxiosError>;
    documentSetRelated(docRef: string, optionalParams?: paramTypes.documentSetRelatedParams): Promise<AxiosResponse | AxiosError>;
    documentSetSurveyInfo(docRef: string, analystID: string, groupID: string, usefulness: Object, optionalParams?: paramTypes.documentSetSurveyInfoParams): Promise<AxiosResponse | AxiosError>;
    documentUpdate(docRef: string, optionalParams?: paramTypes.documentUpdateParams): Promise<AxiosResponse | AxiosError>;
    doesFileExist(fileName: string, optionalParams?: paramTypes.doesFileExistParams): Promise<AxiosResponse | AxiosError>;
    isCallInKnowledgeBase(callref: string, optionalParams?: paramTypes.isCallInKnowledgeBaseParams): Promise<AxiosResponse | AxiosError>;
    queryKeyword(queryString: string, queryType: string, optionalParams?: paramTypes.queryKeywordParams): Promise<AxiosResponse | AxiosError>;
    queryNatural(queryString: string, optionalParams?: paramTypes.queryNaturalParams): Promise<AxiosResponse | AxiosError>;
    templateList(optionalParams?: paramTypes.templateListParams): Promise<AxiosResponse | AxiosError>;
    unpublishedCallAdd(callRef: number, optionalParams?: paramTypes.unpublishedCallAddParams): Promise<AxiosResponse | AxiosError>;
    unpublishedCallDelete(callRef: number, optionalParams?: paramTypes.unpublishedCallDeleteParams): Promise<AxiosResponse | AxiosError>;
    unpublishedCallList(optionalParams?: paramTypes.unpublishedCallListParams): Promise<AxiosResponse | AxiosError>;
}
